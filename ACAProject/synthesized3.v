/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "csa2_64bit.v:441" *)
module csa2_64bit(op1, op2, sum, crout, reset, clock);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire _167_;
  wire _168_;
  wire _169_;
  wire _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire _181_;
  wire _182_;
  wire _183_;
  wire _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  (* src = "csa2_64bit.v:449" *)
  wire [63:0] a;
  (* src = "csa2_64bit.v:449" *)
  wire [63:0] b;
  (* src = "csa2_64bit.v:443" *)
  input clock;
  (* src = "csa2_64bit.v:451" *)
  wire [7:0] cout_m;
  (* src = "csa2_64bit.v:447" *)
  wire coutf;
  (* src = "csa2_64bit.v:446" *)
  output crout;
  (* src = "csa2_64bit.v:442" *)
  input [63:0] op1;
  (* src = "csa2_64bit.v:442" *)
  input [63:0] op2;
  (* src = "csa2_64bit.v:443" *)
  input reset;
  (* src = "csa2_64bit.v:444" *)
  output [63:0] sum;
  (* src = "csa2_64bit.v:445" *)
  wire [63:0] sumf;
  (* src = "csa2_64bit.v:450" *)
  wire [7:0] w;
  (* src = "csa2_64bit.v:448" *)
  wire [59:0] x;
  (* src = "csa2_64bit.v:448" *)
  wire [59:0] y;
  (* src = "csa2_64bit.v:450" *)
  wire [7:0] z;
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _193_ (
    .CK(clock),
    .D(sumf[0]),
    .Q(sum[0]),
    .QN(_000_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _194_ (
    .CK(clock),
    .D(sumf[1]),
    .Q(sum[1]),
    .QN(_001_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _195_ (
    .CK(clock),
    .D(sumf[2]),
    .Q(sum[2]),
    .QN(_002_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _196_ (
    .CK(clock),
    .D(sumf[3]),
    .Q(sum[3]),
    .QN(_003_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _197_ (
    .CK(clock),
    .D(sumf[4]),
    .Q(sum[4]),
    .QN(_004_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _198_ (
    .CK(clock),
    .D(sumf[5]),
    .Q(sum[5]),
    .QN(_005_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _199_ (
    .CK(clock),
    .D(sumf[6]),
    .Q(sum[6]),
    .QN(_006_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _200_ (
    .CK(clock),
    .D(sumf[7]),
    .Q(sum[7]),
    .QN(_007_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _201_ (
    .CK(clock),
    .D(sumf[8]),
    .Q(sum[8]),
    .QN(_008_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _202_ (
    .CK(clock),
    .D(sumf[9]),
    .Q(sum[9]),
    .QN(_009_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _203_ (
    .CK(clock),
    .D(sumf[10]),
    .Q(sum[10]),
    .QN(_010_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _204_ (
    .CK(clock),
    .D(sumf[11]),
    .Q(sum[11]),
    .QN(_011_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _205_ (
    .CK(clock),
    .D(sumf[12]),
    .Q(sum[12]),
    .QN(_012_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _206_ (
    .CK(clock),
    .D(sumf[13]),
    .Q(sum[13]),
    .QN(_013_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _207_ (
    .CK(clock),
    .D(sumf[14]),
    .Q(sum[14]),
    .QN(_014_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _208_ (
    .CK(clock),
    .D(sumf[15]),
    .Q(sum[15]),
    .QN(_015_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _209_ (
    .CK(clock),
    .D(sumf[16]),
    .Q(sum[16]),
    .QN(_016_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _210_ (
    .CK(clock),
    .D(sumf[17]),
    .Q(sum[17]),
    .QN(_017_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _211_ (
    .CK(clock),
    .D(sumf[18]),
    .Q(sum[18]),
    .QN(_018_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _212_ (
    .CK(clock),
    .D(sumf[19]),
    .Q(sum[19]),
    .QN(_019_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _213_ (
    .CK(clock),
    .D(sumf[20]),
    .Q(sum[20]),
    .QN(_020_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _214_ (
    .CK(clock),
    .D(sumf[21]),
    .Q(sum[21]),
    .QN(_021_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _215_ (
    .CK(clock),
    .D(sumf[22]),
    .Q(sum[22]),
    .QN(_022_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _216_ (
    .CK(clock),
    .D(sumf[23]),
    .Q(sum[23]),
    .QN(_023_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _217_ (
    .CK(clock),
    .D(sumf[24]),
    .Q(sum[24]),
    .QN(_024_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _218_ (
    .CK(clock),
    .D(sumf[25]),
    .Q(sum[25]),
    .QN(_025_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _219_ (
    .CK(clock),
    .D(sumf[26]),
    .Q(sum[26]),
    .QN(_026_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _220_ (
    .CK(clock),
    .D(sumf[27]),
    .Q(sum[27]),
    .QN(_027_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _221_ (
    .CK(clock),
    .D(sumf[28]),
    .Q(sum[28]),
    .QN(_028_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _222_ (
    .CK(clock),
    .D(sumf[29]),
    .Q(sum[29]),
    .QN(_029_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _223_ (
    .CK(clock),
    .D(sumf[30]),
    .Q(sum[30]),
    .QN(_030_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _224_ (
    .CK(clock),
    .D(sumf[31]),
    .Q(sum[31]),
    .QN(_031_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _225_ (
    .CK(clock),
    .D(sumf[32]),
    .Q(sum[32]),
    .QN(_032_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _226_ (
    .CK(clock),
    .D(sumf[33]),
    .Q(sum[33]),
    .QN(_033_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _227_ (
    .CK(clock),
    .D(sumf[34]),
    .Q(sum[34]),
    .QN(_034_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _228_ (
    .CK(clock),
    .D(sumf[35]),
    .Q(sum[35]),
    .QN(_035_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _229_ (
    .CK(clock),
    .D(sumf[36]),
    .Q(sum[36]),
    .QN(_036_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _230_ (
    .CK(clock),
    .D(sumf[37]),
    .Q(sum[37]),
    .QN(_037_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _231_ (
    .CK(clock),
    .D(sumf[38]),
    .Q(sum[38]),
    .QN(_038_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _232_ (
    .CK(clock),
    .D(sumf[39]),
    .Q(sum[39]),
    .QN(_039_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _233_ (
    .CK(clock),
    .D(sumf[40]),
    .Q(sum[40]),
    .QN(_040_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _234_ (
    .CK(clock),
    .D(sumf[41]),
    .Q(sum[41]),
    .QN(_041_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _235_ (
    .CK(clock),
    .D(sumf[42]),
    .Q(sum[42]),
    .QN(_042_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _236_ (
    .CK(clock),
    .D(sumf[43]),
    .Q(sum[43]),
    .QN(_043_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _237_ (
    .CK(clock),
    .D(sumf[44]),
    .Q(sum[44]),
    .QN(_044_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _238_ (
    .CK(clock),
    .D(sumf[45]),
    .Q(sum[45]),
    .QN(_045_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _239_ (
    .CK(clock),
    .D(sumf[46]),
    .Q(sum[46]),
    .QN(_046_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _240_ (
    .CK(clock),
    .D(sumf[47]),
    .Q(sum[47]),
    .QN(_047_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _241_ (
    .CK(clock),
    .D(sumf[48]),
    .Q(sum[48]),
    .QN(_048_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _242_ (
    .CK(clock),
    .D(sumf[49]),
    .Q(sum[49]),
    .QN(_049_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _243_ (
    .CK(clock),
    .D(sumf[50]),
    .Q(sum[50]),
    .QN(_050_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _244_ (
    .CK(clock),
    .D(sumf[51]),
    .Q(sum[51]),
    .QN(_051_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _245_ (
    .CK(clock),
    .D(sumf[52]),
    .Q(sum[52]),
    .QN(_052_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _246_ (
    .CK(clock),
    .D(sumf[53]),
    .Q(sum[53]),
    .QN(_053_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _247_ (
    .CK(clock),
    .D(sumf[54]),
    .Q(sum[54]),
    .QN(_054_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _248_ (
    .CK(clock),
    .D(sumf[55]),
    .Q(sum[55]),
    .QN(_055_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _249_ (
    .CK(clock),
    .D(sumf[56]),
    .Q(sum[56]),
    .QN(_056_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _250_ (
    .CK(clock),
    .D(sumf[57]),
    .Q(sum[57]),
    .QN(_057_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _251_ (
    .CK(clock),
    .D(sumf[58]),
    .Q(sum[58]),
    .QN(_058_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _252_ (
    .CK(clock),
    .D(sumf[59]),
    .Q(sum[59]),
    .QN(_059_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _253_ (
    .CK(clock),
    .D(sumf[60]),
    .Q(sum[60]),
    .QN(_060_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _254_ (
    .CK(clock),
    .D(sumf[61]),
    .Q(sum[61]),
    .QN(_061_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _255_ (
    .CK(clock),
    .D(sumf[62]),
    .Q(sum[62]),
    .QN(_062_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _256_ (
    .CK(clock),
    .D(sumf[63]),
    .Q(sum[63]),
    .QN(_063_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _257_ (
    .CK(clock),
    .D(op2[0]),
    .Q(b[0]),
    .QN(_064_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _258_ (
    .CK(clock),
    .D(op2[1]),
    .Q(b[1]),
    .QN(_065_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _259_ (
    .CK(clock),
    .D(op2[2]),
    .Q(b[2]),
    .QN(_066_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _260_ (
    .CK(clock),
    .D(op2[3]),
    .Q(b[3]),
    .QN(_067_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _261_ (
    .CK(clock),
    .D(op2[4]),
    .Q(b[4]),
    .QN(_068_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _262_ (
    .CK(clock),
    .D(op2[5]),
    .Q(b[5]),
    .QN(_069_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _263_ (
    .CK(clock),
    .D(op2[6]),
    .Q(b[6]),
    .QN(_070_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _264_ (
    .CK(clock),
    .D(op2[7]),
    .Q(b[7]),
    .QN(_071_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _265_ (
    .CK(clock),
    .D(op2[8]),
    .Q(b[8]),
    .QN(_072_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _266_ (
    .CK(clock),
    .D(op2[9]),
    .Q(b[9]),
    .QN(_073_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _267_ (
    .CK(clock),
    .D(op2[10]),
    .Q(b[10]),
    .QN(_074_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _268_ (
    .CK(clock),
    .D(op2[11]),
    .Q(b[11]),
    .QN(_075_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _269_ (
    .CK(clock),
    .D(op2[12]),
    .Q(b[12]),
    .QN(_076_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _270_ (
    .CK(clock),
    .D(op2[13]),
    .Q(b[13]),
    .QN(_077_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _271_ (
    .CK(clock),
    .D(op2[14]),
    .Q(b[14]),
    .QN(_078_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _272_ (
    .CK(clock),
    .D(op2[15]),
    .Q(b[15]),
    .QN(_079_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _273_ (
    .CK(clock),
    .D(op2[16]),
    .Q(b[16]),
    .QN(_080_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _274_ (
    .CK(clock),
    .D(op2[17]),
    .Q(b[17]),
    .QN(_081_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _275_ (
    .CK(clock),
    .D(op2[18]),
    .Q(b[18]),
    .QN(_082_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _276_ (
    .CK(clock),
    .D(op2[19]),
    .Q(b[19]),
    .QN(_083_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _277_ (
    .CK(clock),
    .D(op2[20]),
    .Q(b[20]),
    .QN(_084_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _278_ (
    .CK(clock),
    .D(op2[21]),
    .Q(b[21]),
    .QN(_085_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _279_ (
    .CK(clock),
    .D(op2[22]),
    .Q(b[22]),
    .QN(_086_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _280_ (
    .CK(clock),
    .D(op2[23]),
    .Q(b[23]),
    .QN(_087_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _281_ (
    .CK(clock),
    .D(op2[24]),
    .Q(b[24]),
    .QN(_088_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _282_ (
    .CK(clock),
    .D(op2[25]),
    .Q(b[25]),
    .QN(_089_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _283_ (
    .CK(clock),
    .D(op2[26]),
    .Q(b[26]),
    .QN(_090_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _284_ (
    .CK(clock),
    .D(op2[27]),
    .Q(b[27]),
    .QN(_091_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _285_ (
    .CK(clock),
    .D(op2[28]),
    .Q(b[28]),
    .QN(_092_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _286_ (
    .CK(clock),
    .D(op2[29]),
    .Q(b[29]),
    .QN(_093_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _287_ (
    .CK(clock),
    .D(op2[30]),
    .Q(b[30]),
    .QN(_094_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _288_ (
    .CK(clock),
    .D(op2[31]),
    .Q(b[31]),
    .QN(_095_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _289_ (
    .CK(clock),
    .D(op2[32]),
    .Q(b[32]),
    .QN(_096_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _290_ (
    .CK(clock),
    .D(op2[33]),
    .Q(b[33]),
    .QN(_097_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _291_ (
    .CK(clock),
    .D(op2[34]),
    .Q(b[34]),
    .QN(_098_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _292_ (
    .CK(clock),
    .D(op2[35]),
    .Q(b[35]),
    .QN(_099_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _293_ (
    .CK(clock),
    .D(op2[36]),
    .Q(b[36]),
    .QN(_100_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _294_ (
    .CK(clock),
    .D(op2[37]),
    .Q(b[37]),
    .QN(_101_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _295_ (
    .CK(clock),
    .D(op2[38]),
    .Q(b[38]),
    .QN(_102_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _296_ (
    .CK(clock),
    .D(op2[39]),
    .Q(b[39]),
    .QN(_103_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _297_ (
    .CK(clock),
    .D(op2[40]),
    .Q(b[40]),
    .QN(_104_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _298_ (
    .CK(clock),
    .D(op2[41]),
    .Q(b[41]),
    .QN(_105_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _299_ (
    .CK(clock),
    .D(op2[42]),
    .Q(b[42]),
    .QN(_106_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _300_ (
    .CK(clock),
    .D(op2[43]),
    .Q(b[43]),
    .QN(_107_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _301_ (
    .CK(clock),
    .D(op2[44]),
    .Q(b[44]),
    .QN(_108_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _302_ (
    .CK(clock),
    .D(op2[45]),
    .Q(b[45]),
    .QN(_109_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _303_ (
    .CK(clock),
    .D(op2[46]),
    .Q(b[46]),
    .QN(_110_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _304_ (
    .CK(clock),
    .D(op2[47]),
    .Q(b[47]),
    .QN(_111_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _305_ (
    .CK(clock),
    .D(op2[48]),
    .Q(b[48]),
    .QN(_112_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _306_ (
    .CK(clock),
    .D(op2[49]),
    .Q(b[49]),
    .QN(_113_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _307_ (
    .CK(clock),
    .D(op2[50]),
    .Q(b[50]),
    .QN(_114_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _308_ (
    .CK(clock),
    .D(op2[51]),
    .Q(b[51]),
    .QN(_115_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _309_ (
    .CK(clock),
    .D(op2[52]),
    .Q(b[52]),
    .QN(_116_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _310_ (
    .CK(clock),
    .D(op2[53]),
    .Q(b[53]),
    .QN(_117_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _311_ (
    .CK(clock),
    .D(op2[54]),
    .Q(b[54]),
    .QN(_118_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _312_ (
    .CK(clock),
    .D(op2[55]),
    .Q(b[55]),
    .QN(_119_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _313_ (
    .CK(clock),
    .D(op2[56]),
    .Q(b[56]),
    .QN(_120_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _314_ (
    .CK(clock),
    .D(op2[57]),
    .Q(b[57]),
    .QN(_121_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _315_ (
    .CK(clock),
    .D(op2[58]),
    .Q(b[58]),
    .QN(_122_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _316_ (
    .CK(clock),
    .D(op2[59]),
    .Q(b[59]),
    .QN(_123_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _317_ (
    .CK(clock),
    .D(op2[60]),
    .Q(b[60]),
    .QN(_124_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _318_ (
    .CK(clock),
    .D(op2[61]),
    .Q(b[61]),
    .QN(_125_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _319_ (
    .CK(clock),
    .D(op2[62]),
    .Q(b[62]),
    .QN(_126_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _320_ (
    .CK(clock),
    .D(op2[63]),
    .Q(b[63]),
    .QN(_127_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _321_ (
    .CK(clock),
    .D(coutf),
    .Q(crout),
    .QN(_128_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _322_ (
    .CK(clock),
    .D(op1[0]),
    .Q(a[0]),
    .QN(_129_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _323_ (
    .CK(clock),
    .D(op1[1]),
    .Q(a[1]),
    .QN(_130_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _324_ (
    .CK(clock),
    .D(op1[2]),
    .Q(a[2]),
    .QN(_131_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _325_ (
    .CK(clock),
    .D(op1[3]),
    .Q(a[3]),
    .QN(_132_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _326_ (
    .CK(clock),
    .D(op1[4]),
    .Q(a[4]),
    .QN(_133_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _327_ (
    .CK(clock),
    .D(op1[5]),
    .Q(a[5]),
    .QN(_134_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _328_ (
    .CK(clock),
    .D(op1[6]),
    .Q(a[6]),
    .QN(_135_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _329_ (
    .CK(clock),
    .D(op1[7]),
    .Q(a[7]),
    .QN(_136_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _330_ (
    .CK(clock),
    .D(op1[8]),
    .Q(a[8]),
    .QN(_137_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _331_ (
    .CK(clock),
    .D(op1[9]),
    .Q(a[9]),
    .QN(_138_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _332_ (
    .CK(clock),
    .D(op1[10]),
    .Q(a[10]),
    .QN(_139_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _333_ (
    .CK(clock),
    .D(op1[11]),
    .Q(a[11]),
    .QN(_140_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _334_ (
    .CK(clock),
    .D(op1[12]),
    .Q(a[12]),
    .QN(_141_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _335_ (
    .CK(clock),
    .D(op1[13]),
    .Q(a[13]),
    .QN(_142_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _336_ (
    .CK(clock),
    .D(op1[14]),
    .Q(a[14]),
    .QN(_143_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _337_ (
    .CK(clock),
    .D(op1[15]),
    .Q(a[15]),
    .QN(_144_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _338_ (
    .CK(clock),
    .D(op1[16]),
    .Q(a[16]),
    .QN(_145_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _339_ (
    .CK(clock),
    .D(op1[17]),
    .Q(a[17]),
    .QN(_146_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _340_ (
    .CK(clock),
    .D(op1[18]),
    .Q(a[18]),
    .QN(_147_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _341_ (
    .CK(clock),
    .D(op1[19]),
    .Q(a[19]),
    .QN(_148_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _342_ (
    .CK(clock),
    .D(op1[20]),
    .Q(a[20]),
    .QN(_149_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _343_ (
    .CK(clock),
    .D(op1[21]),
    .Q(a[21]),
    .QN(_150_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _344_ (
    .CK(clock),
    .D(op1[22]),
    .Q(a[22]),
    .QN(_151_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _345_ (
    .CK(clock),
    .D(op1[23]),
    .Q(a[23]),
    .QN(_152_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _346_ (
    .CK(clock),
    .D(op1[24]),
    .Q(a[24]),
    .QN(_153_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _347_ (
    .CK(clock),
    .D(op1[25]),
    .Q(a[25]),
    .QN(_154_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _348_ (
    .CK(clock),
    .D(op1[26]),
    .Q(a[26]),
    .QN(_155_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _349_ (
    .CK(clock),
    .D(op1[27]),
    .Q(a[27]),
    .QN(_156_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _350_ (
    .CK(clock),
    .D(op1[28]),
    .Q(a[28]),
    .QN(_157_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _351_ (
    .CK(clock),
    .D(op1[29]),
    .Q(a[29]),
    .QN(_158_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _352_ (
    .CK(clock),
    .D(op1[30]),
    .Q(a[30]),
    .QN(_159_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _353_ (
    .CK(clock),
    .D(op1[31]),
    .Q(a[31]),
    .QN(_160_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _354_ (
    .CK(clock),
    .D(op1[32]),
    .Q(a[32]),
    .QN(_161_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _355_ (
    .CK(clock),
    .D(op1[33]),
    .Q(a[33]),
    .QN(_162_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _356_ (
    .CK(clock),
    .D(op1[34]),
    .Q(a[34]),
    .QN(_163_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _357_ (
    .CK(clock),
    .D(op1[35]),
    .Q(a[35]),
    .QN(_164_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _358_ (
    .CK(clock),
    .D(op1[36]),
    .Q(a[36]),
    .QN(_165_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _359_ (
    .CK(clock),
    .D(op1[37]),
    .Q(a[37]),
    .QN(_166_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _360_ (
    .CK(clock),
    .D(op1[38]),
    .Q(a[38]),
    .QN(_167_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _361_ (
    .CK(clock),
    .D(op1[39]),
    .Q(a[39]),
    .QN(_168_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _362_ (
    .CK(clock),
    .D(op1[40]),
    .Q(a[40]),
    .QN(_169_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _363_ (
    .CK(clock),
    .D(op1[41]),
    .Q(a[41]),
    .QN(_170_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _364_ (
    .CK(clock),
    .D(op1[42]),
    .Q(a[42]),
    .QN(_171_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _365_ (
    .CK(clock),
    .D(op1[43]),
    .Q(a[43]),
    .QN(_172_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _366_ (
    .CK(clock),
    .D(op1[44]),
    .Q(a[44]),
    .QN(_173_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _367_ (
    .CK(clock),
    .D(op1[45]),
    .Q(a[45]),
    .QN(_174_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _368_ (
    .CK(clock),
    .D(op1[46]),
    .Q(a[46]),
    .QN(_175_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _369_ (
    .CK(clock),
    .D(op1[47]),
    .Q(a[47]),
    .QN(_176_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _370_ (
    .CK(clock),
    .D(op1[48]),
    .Q(a[48]),
    .QN(_177_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _371_ (
    .CK(clock),
    .D(op1[49]),
    .Q(a[49]),
    .QN(_178_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _372_ (
    .CK(clock),
    .D(op1[50]),
    .Q(a[50]),
    .QN(_179_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _373_ (
    .CK(clock),
    .D(op1[51]),
    .Q(a[51]),
    .QN(_180_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _374_ (
    .CK(clock),
    .D(op1[52]),
    .Q(a[52]),
    .QN(_181_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _375_ (
    .CK(clock),
    .D(op1[53]),
    .Q(a[53]),
    .QN(_182_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _376_ (
    .CK(clock),
    .D(op1[54]),
    .Q(a[54]),
    .QN(_183_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _377_ (
    .CK(clock),
    .D(op1[55]),
    .Q(a[55]),
    .QN(_184_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _378_ (
    .CK(clock),
    .D(op1[56]),
    .Q(a[56]),
    .QN(_185_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _379_ (
    .CK(clock),
    .D(op1[57]),
    .Q(a[57]),
    .QN(_186_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _380_ (
    .CK(clock),
    .D(op1[58]),
    .Q(a[58]),
    .QN(_187_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _381_ (
    .CK(clock),
    .D(op1[59]),
    .Q(a[59]),
    .QN(_188_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _382_ (
    .CK(clock),
    .D(op1[60]),
    .Q(a[60]),
    .QN(_189_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _383_ (
    .CK(clock),
    .D(op1[61]),
    .Q(a[61]),
    .QN(_190_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _384_ (
    .CK(clock),
    .D(op1[62]),
    .Q(a[62]),
    .QN(_191_),
    .RN(reset)
  );
  (* src = "csa2_64bit.v:454" *)
  DFFR_X1 _385_ (
    .CK(clock),
    .D(op1[63]),
    .Q(a[63]),
    .QN(_192_),
    .RN(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:477" *)
  four_2bit fa1 (
    .a(a[3:0]),
    .b(b[3:0]),
    .cout4(cout_m[0]),
    .sum4(sumf[3:0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:506" *)
  four8_1bit fa10 (
    .a(a[33:26]),
    .b(b[33:26]),
    .cin(1'h1),
    .cout8_1(w[4]),
    .sum8_1(x[29:22])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:507" *)
  four8_0bit fa11 (
    .a(a[33:26]),
    .b(b[33:26]),
    .cout8_0(z[4]),
    .sum8_0(y[29:22])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:511" *)
  four9_1bit fa12 (
    .a(a[42:34]),
    .b(b[42:34]),
    .cin(1'h1),
    .cout9_1(w[5]),
    .sum9_1(x[38:30])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:512" *)
  four9_0bit fa13 (
    .a(a[42:34]),
    .b(b[42:34]),
    .cout9_0(z[5]),
    .sum9_0(y[38:30])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:517" *)
  four10_1bit fa14 (
    .a(a[52:43]),
    .b(b[52:43]),
    .cin(1'h1),
    .cout10_1(w[6]),
    .sum10_1(x[48:39])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:518" *)
  four10_0bit fa15 (
    .a(a[52:43]),
    .b(b[52:43]),
    .cout10_0(z[6]),
    .sum10_0(y[48:39])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:522" *)
  four11_1bit fa16 (
    .a(a[63:53]),
    .b(b[63:53]),
    .cin(1'h1),
    .cout11_1(w[7]),
    .sum11_1(x[59:49])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:523" *)
  four11_0bit fa17 (
    .a(a[63:53]),
    .b(b[63:53]),
    .cout11_0(z[7]),
    .sum11_0(y[59:49])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:479" *)
  four_1bit fa2 (
    .a(a[7:4]),
    .b(b[7:4]),
    .cin(1'h1),
    .cout3(w[0]),
    .sum3(x[3:0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:480" *)
  four_2bit fa3 (
    .a(a[7:4]),
    .b(b[7:4]),
    .cout4(z[0]),
    .sum4(y[3:0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:488" *)
  four5_1bit fa4 (
    .a(a[12:8]),
    .b(b[12:8]),
    .cin(1'h1),
    .cout5_1(w[1]),
    .sum5_1(x[8:4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:489" *)
  four5_0bit fa5 (
    .a(a[12:8]),
    .b(b[12:8]),
    .cout5_0(z[1]),
    .sum5_0(y[8:4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:493" *)
  four6_1bit fa6 (
    .a(a[18:13]),
    .b(b[18:13]),
    .cin(1'h1),
    .cout6_1(w[2]),
    .sum6_1(x[14:9])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:494" *)
  four6_0bit fa7 (
    .a(a[18:13]),
    .b(b[18:13]),
    .cout6_0(z[2]),
    .sum6_0(y[14:9])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:500" *)
  four7_1bit fa8 (
    .a(a[25:19]),
    .b(b[25:19]),
    .cin(1'h1),
    .cout7_1(w[3]),
    .sum7_1(x[21:15])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:501" *)
  four7_0bit fa9 (
    .a(a[25:19]),
    .b(b[25:19]),
    .cout7_0(z[3]),
    .sum7_0(y[21:15])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:481" *)
  mux_4 m1 (
    .c0(z[0]),
    .c1(w[0]),
    .cout_m(cout_m[1]),
    .s0(y[3:0]),
    .s1(x[3:0]),
    .sel(cout_m[0]),
    .sum_m(sumf[7:4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:490" *)
  mux_5 m2 (
    .c0(z[1]),
    .c1(w[1]),
    .cout_m(cout_m[2]),
    .s0(y[8:4]),
    .s1(x[8:4]),
    .sel(cout_m[1]),
    .sum_m(sumf[12:8])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:495" *)
  mux_6 m3 (
    .c0(z[2]),
    .c1(w[2]),
    .cout_m(cout_m[3]),
    .s0(y[14:9]),
    .s1(x[14:9]),
    .sel(cout_m[2]),
    .sum_m(sumf[18:13])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:502" *)
  mux_7 m4 (
    .c0(z[3]),
    .c1(w[3]),
    .cout_m(cout_m[4]),
    .s0(y[21:15]),
    .s1(x[21:15]),
    .sel(cout_m[3]),
    .sum_m(sumf[25:19])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:508" *)
  mux_8 m5 (
    .c0(z[4]),
    .c1(w[4]),
    .cout_m(cout_m[5]),
    .s0(y[29:22]),
    .s1(x[29:22]),
    .sel(cout_m[4]),
    .sum_m(sumf[33:26])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:513" *)
  mux_9 m6 (
    .c0(z[5]),
    .c1(w[5]),
    .cout_m(cout_m[6]),
    .s0(y[38:30]),
    .s1(x[38:30]),
    .sel(cout_m[5]),
    .sum_m(sumf[42:34])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:519" *)
  mux_10 m7 (
    .c0(z[6]),
    .c1(w[6]),
    .cout_m(cout_m[7]),
    .s0(y[48:39]),
    .s1(x[48:39]),
    .sel(cout_m[6]),
    .sum_m(sumf[52:43])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:524" *)
  mux_11 m8 (
    .c0(z[7]),
    .c1(w[7]),
    .cout_m(coutf),
    .s0(y[59:49]),
    .s1(x[59:49]),
    .sel(cout_m[7]),
    .sum_m(sumf[63:53])
  );
endmodule

(* src = "csa2_64bit.v:372" *)
module four10_0bit(a, b, sum10_0, cout10_0);
  (* src = "csa2_64bit.v:373" *)
  input [9:0] a;
  (* src = "csa2_64bit.v:373" *)
  input [9:0] b;
  (* src = "csa2_64bit.v:375" *)
  output cout10_0;
  (* src = "csa2_64bit.v:376" *)
  wire [8:0] r;
  (* src = "csa2_64bit.v:374" *)
  output [9:0] sum10_0;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:388" *)
  full_adder fa10 (
    .a(a[9]),
    .b(b[9]),
    .cin(r[8]),
    .cout2(cout10_0),
    .sum2(sum10_0[9])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:380" *)
  full_adder fa2 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum10_0[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:381" *)
  full_adder fa3 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum10_0[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:382" *)
  full_adder fa4 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum10_0[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:383" *)
  full_adder fa5 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(r[4]),
    .sum2(sum10_0[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:384" *)
  full_adder fa6 (
    .a(a[5]),
    .b(b[5]),
    .cin(r[4]),
    .cout2(r[5]),
    .sum2(sum10_0[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:385" *)
  full_adder fa7 (
    .a(a[6]),
    .b(b[6]),
    .cin(r[5]),
    .cout2(r[6]),
    .sum2(sum10_0[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:386" *)
  full_adder fa8 (
    .a(a[7]),
    .b(b[7]),
    .cin(r[6]),
    .cout2(r[7]),
    .sum2(sum10_0[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:387" *)
  full_adder fa9 (
    .a(a[8]),
    .b(b[8]),
    .cin(r[7]),
    .cout2(r[8]),
    .sum2(sum10_0[8])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:379" *)
  half_adder ha1 (
    .a(a[0]),
    .b(b[0]),
    .cout1(r[0]),
    .sum1(sum10_0[0])
  );
endmodule

(* src = "csa2_64bit.v:350" *)
module four10_1bit(a, b, sum10_1, cout10_1, cin);
  (* src = "csa2_64bit.v:351" *)
  input [9:0] a;
  (* src = "csa2_64bit.v:351" *)
  input [9:0] b;
  (* src = "csa2_64bit.v:352" *)
  input cin;
  (* src = "csa2_64bit.v:354" *)
  output cout10_1;
  (* src = "csa2_64bit.v:355" *)
  wire [8:0] r;
  (* src = "csa2_64bit.v:353" *)
  output [9:0] sum10_1;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:357" *)
  full_adder fa1 (
    .a(a[0]),
    .b(b[0]),
    .cin(cin),
    .cout2(r[0]),
    .sum2(sum10_1[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:366" *)
  full_adder fa10 (
    .a(a[9]),
    .b(b[9]),
    .cin(r[8]),
    .cout2(cout10_1),
    .sum2(sum10_1[9])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:358" *)
  full_adder fa2 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum10_1[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:359" *)
  full_adder fa3 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum10_1[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:360" *)
  full_adder fa4 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum10_1[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:361" *)
  full_adder fa5 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(r[4]),
    .sum2(sum10_1[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:362" *)
  full_adder fa6 (
    .a(a[5]),
    .b(b[5]),
    .cin(r[4]),
    .cout2(r[5]),
    .sum2(sum10_1[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:363" *)
  full_adder fa7 (
    .a(a[6]),
    .b(b[6]),
    .cin(r[5]),
    .cout2(r[6]),
    .sum2(sum10_1[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:364" *)
  full_adder fa8 (
    .a(a[7]),
    .b(b[7]),
    .cin(r[6]),
    .cout2(r[7]),
    .sum2(sum10_1[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:365" *)
  full_adder fa9 (
    .a(a[8]),
    .b(b[8]),
    .cin(r[7]),
    .cout2(r[8]),
    .sum2(sum10_1[8])
  );
endmodule

(* src = "csa2_64bit.v:417" *)
module four11_0bit(a, b, sum11_0, cout11_0);
  (* src = "csa2_64bit.v:418" *)
  input [10:0] a;
  (* src = "csa2_64bit.v:418" *)
  input [10:0] b;
  (* src = "csa2_64bit.v:420" *)
  output cout11_0;
  (* src = "csa2_64bit.v:421" *)
  wire [9:0] r;
  (* src = "csa2_64bit.v:419" *)
  output [10:0] sum11_0;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:432" *)
  full_adder fa10 (
    .a(a[9]),
    .b(b[9]),
    .cin(r[8]),
    .cout2(r[9]),
    .sum2(sum11_0[9])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:433" *)
  full_adder fa11 (
    .a(a[10]),
    .b(b[10]),
    .cin(r[9]),
    .cout2(cout11_0),
    .sum2(sum11_0[10])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:424" *)
  full_adder fa2 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum11_0[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:425" *)
  full_adder fa3 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum11_0[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:426" *)
  full_adder fa4 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum11_0[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:427" *)
  full_adder fa5 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(r[4]),
    .sum2(sum11_0[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:428" *)
  full_adder fa6 (
    .a(a[5]),
    .b(b[5]),
    .cin(r[4]),
    .cout2(r[5]),
    .sum2(sum11_0[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:429" *)
  full_adder fa7 (
    .a(a[6]),
    .b(b[6]),
    .cin(r[5]),
    .cout2(r[6]),
    .sum2(sum11_0[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:430" *)
  full_adder fa8 (
    .a(a[7]),
    .b(b[7]),
    .cin(r[6]),
    .cout2(r[7]),
    .sum2(sum11_0[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:431" *)
  full_adder fa9 (
    .a(a[8]),
    .b(b[8]),
    .cin(r[7]),
    .cout2(r[8]),
    .sum2(sum11_0[8])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:423" *)
  half_adder ha1 (
    .a(a[0]),
    .b(b[0]),
    .cout1(r[0]),
    .sum1(sum11_0[0])
  );
endmodule

(* src = "csa2_64bit.v:395" *)
module four11_1bit(a, b, sum11_1, cout11_1, cin);
  (* src = "csa2_64bit.v:396" *)
  input [10:0] a;
  (* src = "csa2_64bit.v:396" *)
  input [10:0] b;
  (* src = "csa2_64bit.v:397" *)
  input cin;
  (* src = "csa2_64bit.v:399" *)
  output cout11_1;
  (* src = "csa2_64bit.v:400" *)
  wire [9:0] r;
  (* src = "csa2_64bit.v:398" *)
  output [10:0] sum11_1;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:402" *)
  full_adder fa1 (
    .a(a[0]),
    .b(b[0]),
    .cin(cin),
    .cout2(r[0]),
    .sum2(sum11_1[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:411" *)
  full_adder fa10 (
    .a(a[9]),
    .b(b[9]),
    .cin(r[8]),
    .cout2(r[9]),
    .sum2(sum11_1[9])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:412" *)
  full_adder fa11 (
    .a(a[10]),
    .b(b[10]),
    .cin(r[9]),
    .cout2(cout11_1),
    .sum2(sum11_1[10])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:403" *)
  full_adder fa2 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum11_1[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:404" *)
  full_adder fa3 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum11_1[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:405" *)
  full_adder fa4 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum11_1[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:406" *)
  full_adder fa5 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(r[4]),
    .sum2(sum11_1[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:407" *)
  full_adder fa6 (
    .a(a[5]),
    .b(b[5]),
    .cin(r[4]),
    .cout2(r[5]),
    .sum2(sum11_1[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:408" *)
  full_adder fa7 (
    .a(a[6]),
    .b(b[6]),
    .cin(r[5]),
    .cout2(r[6]),
    .sum2(sum11_1[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:409" *)
  full_adder fa8 (
    .a(a[7]),
    .b(b[7]),
    .cin(r[6]),
    .cout2(r[7]),
    .sum2(sum11_1[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:410" *)
  full_adder fa9 (
    .a(a[8]),
    .b(b[8]),
    .cin(r[7]),
    .cout2(r[8]),
    .sum2(sum11_1[8])
  );
endmodule

(* src = "csa2_64bit.v:185" *)
module four5_0bit(a, b, sum5_0, cout5_0);
  (* src = "csa2_64bit.v:186" *)
  input [4:0] a;
  (* src = "csa2_64bit.v:186" *)
  input [4:0] b;
  (* src = "csa2_64bit.v:188" *)
  output cout5_0;
  (* src = "csa2_64bit.v:189" *)
  wire [3:0] r;
  (* src = "csa2_64bit.v:187" *)
  output [4:0] sum5_0;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:192" *)
  full_adder fa1 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum5_0[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:193" *)
  full_adder fa2 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum5_0[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:194" *)
  full_adder fa3 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum5_0[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:195" *)
  full_adder fa5 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(cout5_0),
    .sum2(sum5_0[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:191" *)
  half_adder ha1 (
    .a(a[0]),
    .b(b[0]),
    .cout1(r[0]),
    .sum1(sum5_0[0])
  );
endmodule

(* src = "csa2_64bit.v:170" *)
module four5_1bit(a, b, sum5_1, cout5_1, cin);
  (* src = "csa2_64bit.v:171" *)
  input [4:0] a;
  (* src = "csa2_64bit.v:171" *)
  input [4:0] b;
  (* src = "csa2_64bit.v:172" *)
  input cin;
  (* src = "csa2_64bit.v:174" *)
  output cout5_1;
  (* src = "csa2_64bit.v:175" *)
  wire [3:0] r;
  (* src = "csa2_64bit.v:173" *)
  output [4:0] sum5_1;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:177" *)
  full_adder fa1 (
    .a(a[0]),
    .b(b[0]),
    .cin(cin),
    .cout2(r[0]),
    .sum2(sum5_1[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:178" *)
  full_adder fa2 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum5_1[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:179" *)
  full_adder fa3 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum5_1[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:180" *)
  full_adder fa4 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum5_1[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:181" *)
  full_adder fa5 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(cout5_1),
    .sum2(sum5_1[4])
  );
endmodule

(* src = "csa2_64bit.v:218" *)
module four6_0bit(a, b, sum6_0, cout6_0);
  (* src = "csa2_64bit.v:219" *)
  input [5:0] a;
  (* src = "csa2_64bit.v:219" *)
  input [5:0] b;
  (* src = "csa2_64bit.v:221" *)
  output cout6_0;
  (* src = "csa2_64bit.v:222" *)
  wire [4:0] r;
  (* src = "csa2_64bit.v:220" *)
  output [5:0] sum6_0;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:225" *)
  full_adder fa1 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum6_0[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:226" *)
  full_adder fa2 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum6_0[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:227" *)
  full_adder fa3 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum6_0[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:228" *)
  full_adder fa4 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(r[4]),
    .sum2(sum6_0[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:229" *)
  full_adder fa5 (
    .a(a[5]),
    .b(b[5]),
    .cin(r[4]),
    .cout2(cout6_0),
    .sum2(sum6_0[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:224" *)
  half_adder ha1 (
    .a(a[0]),
    .b(b[0]),
    .cout1(r[0]),
    .sum1(sum6_0[0])
  );
endmodule

(* src = "csa2_64bit.v:202" *)
module four6_1bit(a, b, sum6_1, cout6_1, cin);
  (* src = "csa2_64bit.v:203" *)
  input [5:0] a;
  (* src = "csa2_64bit.v:203" *)
  input [5:0] b;
  (* src = "csa2_64bit.v:204" *)
  input cin;
  (* src = "csa2_64bit.v:206" *)
  output cout6_1;
  (* src = "csa2_64bit.v:207" *)
  wire [4:0] r;
  (* src = "csa2_64bit.v:205" *)
  output [5:0] sum6_1;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:209" *)
  full_adder fa1 (
    .a(a[0]),
    .b(b[0]),
    .cin(cin),
    .cout2(r[0]),
    .sum2(sum6_1[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:210" *)
  full_adder fa2 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum6_1[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:211" *)
  full_adder fa3 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum6_1[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:212" *)
  full_adder fa4 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum6_1[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:213" *)
  full_adder fa5 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(r[4]),
    .sum2(sum6_1[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:214" *)
  full_adder fa6 (
    .a(a[5]),
    .b(b[5]),
    .cin(r[4]),
    .cout2(cout6_1),
    .sum2(sum6_1[5])
  );
endmodule

(* src = "csa2_64bit.v:253" *)
module four7_0bit(a, b, sum7_0, cout7_0);
  (* src = "csa2_64bit.v:254" *)
  input [6:0] a;
  (* src = "csa2_64bit.v:254" *)
  input [6:0] b;
  (* src = "csa2_64bit.v:256" *)
  output cout7_0;
  (* src = "csa2_64bit.v:257" *)
  wire [5:0] r;
  (* src = "csa2_64bit.v:255" *)
  output [6:0] sum7_0;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:260" *)
  full_adder fa2 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum7_0[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:261" *)
  full_adder fa3 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum7_0[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:262" *)
  full_adder fa4 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum7_0[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:263" *)
  full_adder fa5 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(r[4]),
    .sum2(sum7_0[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:264" *)
  full_adder fa6 (
    .a(a[5]),
    .b(b[5]),
    .cin(r[4]),
    .cout2(r[5]),
    .sum2(sum7_0[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:265" *)
  full_adder fa7 (
    .a(a[6]),
    .b(b[6]),
    .cin(r[5]),
    .cout2(cout7_0),
    .sum2(sum7_0[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:259" *)
  half_adder ha1 (
    .a(a[0]),
    .b(b[0]),
    .cout1(r[0]),
    .sum1(sum7_0[0])
  );
endmodule

(* src = "csa2_64bit.v:236" *)
module four7_1bit(a, b, sum7_1, cout7_1, cin);
  (* src = "csa2_64bit.v:237" *)
  input [6:0] a;
  (* src = "csa2_64bit.v:237" *)
  input [6:0] b;
  (* src = "csa2_64bit.v:238" *)
  input cin;
  (* src = "csa2_64bit.v:240" *)
  output cout7_1;
  (* src = "csa2_64bit.v:241" *)
  wire [5:0] r;
  (* src = "csa2_64bit.v:239" *)
  output [6:0] sum7_1;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:243" *)
  full_adder fa1 (
    .a(a[0]),
    .b(b[0]),
    .cin(cin),
    .cout2(r[0]),
    .sum2(sum7_1[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:244" *)
  full_adder fa2 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum7_1[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:245" *)
  full_adder fa3 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum7_1[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:246" *)
  full_adder fa4 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum7_1[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:247" *)
  full_adder fa5 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(r[4]),
    .sum2(sum7_1[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:248" *)
  full_adder fa6 (
    .a(a[5]),
    .b(b[5]),
    .cin(r[4]),
    .cout2(r[5]),
    .sum2(sum7_1[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:249" *)
  full_adder fa7 (
    .a(a[6]),
    .b(b[6]),
    .cin(r[5]),
    .cout2(cout7_1),
    .sum2(sum7_1[6])
  );
endmodule

(* src = "csa2_64bit.v:291" *)
module four8_0bit(a, b, sum8_0, cout8_0);
  (* src = "csa2_64bit.v:292" *)
  input [7:0] a;
  (* src = "csa2_64bit.v:292" *)
  input [7:0] b;
  (* src = "csa2_64bit.v:294" *)
  output cout8_0;
  (* src = "csa2_64bit.v:295" *)
  wire [6:0] r;
  (* src = "csa2_64bit.v:293" *)
  output [7:0] sum8_0;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:298" *)
  full_adder fa2 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum8_0[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:299" *)
  full_adder fa3 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum8_0[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:300" *)
  full_adder fa4 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum8_0[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:301" *)
  full_adder fa5 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(r[4]),
    .sum2(sum8_0[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:302" *)
  full_adder fa6 (
    .a(a[5]),
    .b(b[5]),
    .cin(r[4]),
    .cout2(r[5]),
    .sum2(sum8_0[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:303" *)
  full_adder fa7 (
    .a(a[6]),
    .b(b[6]),
    .cin(r[5]),
    .cout2(r[6]),
    .sum2(sum8_0[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:304" *)
  full_adder fa8 (
    .a(a[7]),
    .b(b[7]),
    .cin(r[6]),
    .cout2(cout8_0),
    .sum2(sum8_0[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:297" *)
  half_adder ha1 (
    .a(a[0]),
    .b(b[0]),
    .cout1(r[0]),
    .sum1(sum8_0[0])
  );
endmodule

(* src = "csa2_64bit.v:271" *)
module four8_1bit(a, b, sum8_1, cout8_1, cin);
  (* src = "csa2_64bit.v:272" *)
  input [7:0] a;
  (* src = "csa2_64bit.v:272" *)
  input [7:0] b;
  (* src = "csa2_64bit.v:273" *)
  input cin;
  (* src = "csa2_64bit.v:275" *)
  output cout8_1;
  (* src = "csa2_64bit.v:276" *)
  wire [6:0] r;
  (* src = "csa2_64bit.v:274" *)
  output [7:0] sum8_1;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:278" *)
  full_adder fa1 (
    .a(a[0]),
    .b(b[0]),
    .cin(cin),
    .cout2(r[0]),
    .sum2(sum8_1[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:279" *)
  full_adder fa2 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum8_1[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:280" *)
  full_adder fa3 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum8_1[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:281" *)
  full_adder fa4 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum8_1[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:282" *)
  full_adder fa5 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(r[4]),
    .sum2(sum8_1[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:283" *)
  full_adder fa6 (
    .a(a[5]),
    .b(b[5]),
    .cin(r[4]),
    .cout2(r[5]),
    .sum2(sum8_1[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:284" *)
  full_adder fa7 (
    .a(a[6]),
    .b(b[6]),
    .cin(r[5]),
    .cout2(r[6]),
    .sum2(sum8_1[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:285" *)
  full_adder fa8 (
    .a(a[7]),
    .b(b[7]),
    .cin(r[6]),
    .cout2(cout8_1),
    .sum2(sum8_1[7])
  );
endmodule

(* src = "csa2_64bit.v:330" *)
module four9_0bit(a, b, sum9_0, cout9_0);
  (* src = "csa2_64bit.v:331" *)
  input [8:0] a;
  (* src = "csa2_64bit.v:331" *)
  input [8:0] b;
  (* src = "csa2_64bit.v:333" *)
  output cout9_0;
  (* src = "csa2_64bit.v:334" *)
  wire [7:0] r;
  (* src = "csa2_64bit.v:332" *)
  output [8:0] sum9_0;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:337" *)
  full_adder fa2 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum9_0[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:338" *)
  full_adder fa3 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum9_0[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:339" *)
  full_adder fa4 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum9_0[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:340" *)
  full_adder fa5 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(r[4]),
    .sum2(sum9_0[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:341" *)
  full_adder fa6 (
    .a(a[5]),
    .b(b[5]),
    .cin(r[4]),
    .cout2(r[5]),
    .sum2(sum9_0[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:342" *)
  full_adder fa7 (
    .a(a[6]),
    .b(b[6]),
    .cin(r[5]),
    .cout2(r[6]),
    .sum2(sum9_0[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:343" *)
  full_adder fa8 (
    .a(a[7]),
    .b(b[7]),
    .cin(r[6]),
    .cout2(r[7]),
    .sum2(sum9_0[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:344" *)
  full_adder fa9 (
    .a(a[8]),
    .b(b[8]),
    .cin(r[7]),
    .cout2(cout9_0),
    .sum2(sum9_0[8])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:336" *)
  half_adder ha1 (
    .a(a[0]),
    .b(b[0]),
    .cout1(r[0]),
    .sum1(sum9_0[0])
  );
endmodule

(* src = "csa2_64bit.v:310" *)
module four9_1bit(a, b, sum9_1, cout9_1, cin);
  (* src = "csa2_64bit.v:311" *)
  input [8:0] a;
  (* src = "csa2_64bit.v:311" *)
  input [8:0] b;
  (* src = "csa2_64bit.v:312" *)
  input cin;
  (* src = "csa2_64bit.v:314" *)
  output cout9_1;
  (* src = "csa2_64bit.v:315" *)
  wire [7:0] r;
  (* src = "csa2_64bit.v:313" *)
  output [8:0] sum9_1;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:317" *)
  full_adder fa1 (
    .a(a[0]),
    .b(b[0]),
    .cin(cin),
    .cout2(r[0]),
    .sum2(sum9_1[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:318" *)
  full_adder fa2 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum9_1[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:319" *)
  full_adder fa3 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum9_1[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:320" *)
  full_adder fa4 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(r[3]),
    .sum2(sum9_1[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:321" *)
  full_adder fa5 (
    .a(a[4]),
    .b(b[4]),
    .cin(r[3]),
    .cout2(r[4]),
    .sum2(sum9_1[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:322" *)
  full_adder fa6 (
    .a(a[5]),
    .b(b[5]),
    .cin(r[4]),
    .cout2(r[5]),
    .sum2(sum9_1[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:323" *)
  full_adder fa7 (
    .a(a[6]),
    .b(b[6]),
    .cin(r[5]),
    .cout2(r[6]),
    .sum2(sum9_1[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:324" *)
  full_adder fa8 (
    .a(a[7]),
    .b(b[7]),
    .cin(r[6]),
    .cout2(r[7]),
    .sum2(sum9_1[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:325" *)
  full_adder fa9 (
    .a(a[8]),
    .b(b[8]),
    .cin(r[7]),
    .cout2(cout9_1),
    .sum2(sum9_1[8])
  );
endmodule

(* src = "csa2_64bit.v:27" *)
module four_1bit(a, b, sum3, cout3, cin);
  (* src = "csa2_64bit.v:28" *)
  input [3:0] a;
  (* src = "csa2_64bit.v:28" *)
  input [3:0] b;
  (* src = "csa2_64bit.v:29" *)
  input cin;
  (* src = "csa2_64bit.v:31" *)
  output cout3;
  (* src = "csa2_64bit.v:32" *)
  wire [2:0] r;
  (* src = "csa2_64bit.v:30" *)
  output [3:0] sum3;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:34" *)
  full_adder fa1 (
    .a(a[0]),
    .b(b[0]),
    .cin(cin),
    .cout2(r[0]),
    .sum2(sum3[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:35" *)
  full_adder fa2 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum3[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:36" *)
  full_adder fa3 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum3[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:37" *)
  full_adder fa4 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(cout3),
    .sum2(sum3[3])
  );
endmodule

(* src = "csa2_64bit.v:43" *)
module four_2bit(a, b, sum4, cout4);
  (* src = "csa2_64bit.v:44" *)
  input [3:0] a;
  (* src = "csa2_64bit.v:44" *)
  input [3:0] b;
  (* src = "csa2_64bit.v:46" *)
  output cout4;
  (* src = "csa2_64bit.v:47" *)
  wire [2:0] r;
  (* src = "csa2_64bit.v:45" *)
  output [3:0] sum4;
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:50" *)
  full_adder fa1 (
    .a(a[1]),
    .b(b[1]),
    .cin(r[0]),
    .cout2(r[1]),
    .sum2(sum4[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:51" *)
  full_adder fa2 (
    .a(a[2]),
    .b(b[2]),
    .cin(r[1]),
    .cout2(r[2]),
    .sum2(sum4[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:52" *)
  full_adder fa3 (
    .a(a[3]),
    .b(b[3]),
    .cin(r[2]),
    .cout2(cout4),
    .sum2(sum4[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "csa2_64bit.v:49" *)
  half_adder ha1 (
    .a(a[0]),
    .b(b[0]),
    .cout1(r[0]),
    .sum1(sum4[0])
  );
endmodule

(* src = "csa2_64bit.v:15" *)
module full_adder(a, b, sum2, cout2, cin);
  wire _00_;
  wire _01_;
  wire _02_;
  (* src = "csa2_64bit.v:16" *)
  wire _03_;
  (* src = "csa2_64bit.v:16" *)
  wire _04_;
  (* src = "csa2_64bit.v:16" *)
  wire _05_;
  (* src = "csa2_64bit.v:17" *)
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "csa2_64bit.v:17" *)
  wire _10_;
  (* src = "csa2_64bit.v:16" *)
  input a;
  (* src = "csa2_64bit.v:16" *)
  input b;
  (* src = "csa2_64bit.v:16" *)
  input cin;
  (* src = "csa2_64bit.v:17" *)
  output cout2;
  (* src = "csa2_64bit.v:17" *)
  output sum2;
  INV_X1 _11_ (
    .A(_05_),
    .ZN(_07_)
  );
  NAND2_X1 _12_ (
    .A1(_04_),
    .A2(_03_),
    .ZN(_08_)
  );
  XNOR2_X1 _13_ (
    .A(_04_),
    .B(_03_),
    .ZN(_09_)
  );
  XNOR2_X1 _14_ (
    .A(_05_),
    .B(_09_),
    .ZN(_10_)
  );
  OAI21_X1 _15_ (
    .A(_08_),
    .B1(_09_),
    .B2(_07_),
    .ZN(_06_)
  );
  assign _05_ = cin;
  assign _04_ = b;
  assign _03_ = a;
  assign sum2 = _10_;
  assign cout2 = _06_;
endmodule

(* src = "csa2_64bit.v:4" *)
module half_adder(a, b, sum1, cout1);
  (* src = "csa2_64bit.v:5" *)
  wire _0_;
  (* src = "csa2_64bit.v:5" *)
  wire _1_;
  (* src = "csa2_64bit.v:6" *)
  wire _2_;
  (* src = "csa2_64bit.v:6" *)
  wire _3_;
  (* src = "csa2_64bit.v:5" *)
  input a;
  (* src = "csa2_64bit.v:5" *)
  input b;
  (* src = "csa2_64bit.v:6" *)
  output cout1;
  (* src = "csa2_64bit.v:6" *)
  output sum1;
  AND2_X1 _4_ (
    .A1(_1_),
    .A2(_0_),
    .ZN(_2_)
  );
  XOR2_X1 _5_ (
    .A(_1_),
    .B(_0_),
    .Z(_3_)
  );
  assign _1_ = b;
  assign _0_ = a;
  assign sum1 = _3_;
  assign cout1 = _2_;
endmodule

(* src = "csa2_64bit.v:141" *)
module mux_10(s0, s1, c0, c1, sel, sum_m, cout_m);
  (* src = "csa2_64bit.v:144" *)
  wire _00_;
  (* src = "csa2_64bit.v:144" *)
  wire _01_;
  (* src = "csa2_64bit.v:146" *)
  wire _02_;
  (* src = "csa2_64bit.v:143" *)
  wire _03_;
  (* src = "csa2_64bit.v:143" *)
  wire _04_;
  (* src = "csa2_64bit.v:143" *)
  wire _05_;
  (* src = "csa2_64bit.v:143" *)
  wire _06_;
  (* src = "csa2_64bit.v:143" *)
  wire _07_;
  (* src = "csa2_64bit.v:143" *)
  wire _08_;
  (* src = "csa2_64bit.v:143" *)
  wire _09_;
  (* src = "csa2_64bit.v:143" *)
  wire _10_;
  (* src = "csa2_64bit.v:143" *)
  wire _11_;
  (* src = "csa2_64bit.v:143" *)
  wire _12_;
  (* src = "csa2_64bit.v:143" *)
  wire _13_;
  (* src = "csa2_64bit.v:143" *)
  wire _14_;
  (* src = "csa2_64bit.v:143" *)
  wire _15_;
  (* src = "csa2_64bit.v:143" *)
  wire _16_;
  (* src = "csa2_64bit.v:143" *)
  wire _17_;
  (* src = "csa2_64bit.v:143" *)
  wire _18_;
  (* src = "csa2_64bit.v:143" *)
  wire _19_;
  (* src = "csa2_64bit.v:143" *)
  wire _20_;
  (* src = "csa2_64bit.v:143" *)
  wire _21_;
  (* src = "csa2_64bit.v:143" *)
  wire _22_;
  (* src = "csa2_64bit.v:142" *)
  wire _23_;
  (* src = "csa2_64bit.v:145" *)
  wire _24_;
  (* src = "csa2_64bit.v:145" *)
  wire _25_;
  (* src = "csa2_64bit.v:145" *)
  wire _26_;
  (* src = "csa2_64bit.v:145" *)
  wire _27_;
  (* src = "csa2_64bit.v:145" *)
  wire _28_;
  (* src = "csa2_64bit.v:145" *)
  wire _29_;
  (* src = "csa2_64bit.v:145" *)
  wire _30_;
  (* src = "csa2_64bit.v:145" *)
  wire _31_;
  (* src = "csa2_64bit.v:145" *)
  wire _32_;
  (* src = "csa2_64bit.v:145" *)
  wire _33_;
  (* src = "csa2_64bit.v:144" *)
  input c0;
  (* src = "csa2_64bit.v:144" *)
  input c1;
  (* src = "csa2_64bit.v:146" *)
  output cout_m;
  (* src = "csa2_64bit.v:143" *)
  input [9:0] s0;
  (* src = "csa2_64bit.v:143" *)
  input [9:0] s1;
  (* src = "csa2_64bit.v:142" *)
  input sel;
  (* src = "csa2_64bit.v:145" *)
  output [9:0] sum_m;
  MUX2_X1 _34_ (
    .A(_03_),
    .B(_13_),
    .S(_23_),
    .Z(_24_)
  );
  MUX2_X1 _35_ (
    .A(_04_),
    .B(_14_),
    .S(_23_),
    .Z(_25_)
  );
  MUX2_X1 _36_ (
    .A(_05_),
    .B(_15_),
    .S(_23_),
    .Z(_26_)
  );
  MUX2_X1 _37_ (
    .A(_06_),
    .B(_16_),
    .S(_23_),
    .Z(_27_)
  );
  MUX2_X1 _38_ (
    .A(_07_),
    .B(_17_),
    .S(_23_),
    .Z(_28_)
  );
  MUX2_X1 _39_ (
    .A(_08_),
    .B(_18_),
    .S(_23_),
    .Z(_29_)
  );
  MUX2_X1 _40_ (
    .A(_09_),
    .B(_19_),
    .S(_23_),
    .Z(_30_)
  );
  MUX2_X1 _41_ (
    .A(_10_),
    .B(_20_),
    .S(_23_),
    .Z(_31_)
  );
  MUX2_X1 _42_ (
    .A(_11_),
    .B(_21_),
    .S(_23_),
    .Z(_32_)
  );
  MUX2_X1 _43_ (
    .A(_12_),
    .B(_22_),
    .S(_23_),
    .Z(_33_)
  );
  MUX2_X1 _44_ (
    .A(_00_),
    .B(_01_),
    .S(_23_),
    .Z(_02_)
  );
  assign _03_ = s0[0];
  assign _13_ = s1[0];
  assign _23_ = sel;
  assign sum_m[0] = _24_;
  assign _04_ = s0[1];
  assign _14_ = s1[1];
  assign sum_m[1] = _25_;
  assign _05_ = s0[2];
  assign _15_ = s1[2];
  assign sum_m[2] = _26_;
  assign _06_ = s0[3];
  assign _16_ = s1[3];
  assign sum_m[3] = _27_;
  assign _07_ = s0[4];
  assign _17_ = s1[4];
  assign sum_m[4] = _28_;
  assign _08_ = s0[5];
  assign _18_ = s1[5];
  assign sum_m[5] = _29_;
  assign _09_ = s0[6];
  assign _19_ = s1[6];
  assign sum_m[6] = _30_;
  assign _10_ = s0[7];
  assign _20_ = s1[7];
  assign sum_m[7] = _31_;
  assign _11_ = s0[8];
  assign _21_ = s1[8];
  assign sum_m[8] = _32_;
  assign _12_ = s0[9];
  assign _22_ = s1[9];
  assign sum_m[9] = _33_;
  assign _00_ = c0;
  assign _01_ = c1;
  assign cout_m = _02_;
endmodule

(* src = "csa2_64bit.v:155" *)
module mux_11(s0, s1, c0, c1, sel, sum_m, cout_m);
  (* src = "csa2_64bit.v:158" *)
  wire _00_;
  (* src = "csa2_64bit.v:158" *)
  wire _01_;
  (* src = "csa2_64bit.v:160" *)
  wire _02_;
  (* src = "csa2_64bit.v:157" *)
  wire _03_;
  (* src = "csa2_64bit.v:157" *)
  wire _04_;
  (* src = "csa2_64bit.v:157" *)
  wire _05_;
  (* src = "csa2_64bit.v:157" *)
  wire _06_;
  (* src = "csa2_64bit.v:157" *)
  wire _07_;
  (* src = "csa2_64bit.v:157" *)
  wire _08_;
  (* src = "csa2_64bit.v:157" *)
  wire _09_;
  (* src = "csa2_64bit.v:157" *)
  wire _10_;
  (* src = "csa2_64bit.v:157" *)
  wire _11_;
  (* src = "csa2_64bit.v:157" *)
  wire _12_;
  (* src = "csa2_64bit.v:157" *)
  wire _13_;
  (* src = "csa2_64bit.v:157" *)
  wire _14_;
  (* src = "csa2_64bit.v:157" *)
  wire _15_;
  (* src = "csa2_64bit.v:157" *)
  wire _16_;
  (* src = "csa2_64bit.v:157" *)
  wire _17_;
  (* src = "csa2_64bit.v:157" *)
  wire _18_;
  (* src = "csa2_64bit.v:157" *)
  wire _19_;
  (* src = "csa2_64bit.v:157" *)
  wire _20_;
  (* src = "csa2_64bit.v:157" *)
  wire _21_;
  (* src = "csa2_64bit.v:157" *)
  wire _22_;
  (* src = "csa2_64bit.v:157" *)
  wire _23_;
  (* src = "csa2_64bit.v:157" *)
  wire _24_;
  (* src = "csa2_64bit.v:156" *)
  wire _25_;
  (* src = "csa2_64bit.v:159" *)
  wire _26_;
  (* src = "csa2_64bit.v:159" *)
  wire _27_;
  (* src = "csa2_64bit.v:159" *)
  wire _28_;
  (* src = "csa2_64bit.v:159" *)
  wire _29_;
  (* src = "csa2_64bit.v:159" *)
  wire _30_;
  (* src = "csa2_64bit.v:159" *)
  wire _31_;
  (* src = "csa2_64bit.v:159" *)
  wire _32_;
  (* src = "csa2_64bit.v:159" *)
  wire _33_;
  (* src = "csa2_64bit.v:159" *)
  wire _34_;
  (* src = "csa2_64bit.v:159" *)
  wire _35_;
  (* src = "csa2_64bit.v:159" *)
  wire _36_;
  (* src = "csa2_64bit.v:158" *)
  input c0;
  (* src = "csa2_64bit.v:158" *)
  input c1;
  (* src = "csa2_64bit.v:160" *)
  output cout_m;
  (* src = "csa2_64bit.v:157" *)
  input [10:0] s0;
  (* src = "csa2_64bit.v:157" *)
  input [10:0] s1;
  (* src = "csa2_64bit.v:156" *)
  input sel;
  (* src = "csa2_64bit.v:159" *)
  output [10:0] sum_m;
  MUX2_X1 _37_ (
    .A(_03_),
    .B(_14_),
    .S(_25_),
    .Z(_26_)
  );
  MUX2_X1 _38_ (
    .A(_05_),
    .B(_16_),
    .S(_25_),
    .Z(_28_)
  );
  MUX2_X1 _39_ (
    .A(_06_),
    .B(_17_),
    .S(_25_),
    .Z(_29_)
  );
  MUX2_X1 _40_ (
    .A(_07_),
    .B(_18_),
    .S(_25_),
    .Z(_30_)
  );
  MUX2_X1 _41_ (
    .A(_08_),
    .B(_19_),
    .S(_25_),
    .Z(_31_)
  );
  MUX2_X1 _42_ (
    .A(_09_),
    .B(_20_),
    .S(_25_),
    .Z(_32_)
  );
  MUX2_X1 _43_ (
    .A(_10_),
    .B(_21_),
    .S(_25_),
    .Z(_33_)
  );
  MUX2_X1 _44_ (
    .A(_11_),
    .B(_22_),
    .S(_25_),
    .Z(_34_)
  );
  MUX2_X1 _45_ (
    .A(_12_),
    .B(_23_),
    .S(_25_),
    .Z(_35_)
  );
  MUX2_X1 _46_ (
    .A(_13_),
    .B(_24_),
    .S(_25_),
    .Z(_36_)
  );
  MUX2_X1 _47_ (
    .A(_04_),
    .B(_15_),
    .S(_25_),
    .Z(_27_)
  );
  MUX2_X1 _48_ (
    .A(_00_),
    .B(_01_),
    .S(_25_),
    .Z(_02_)
  );
  assign _03_ = s0[0];
  assign _14_ = s1[0];
  assign _25_ = sel;
  assign sum_m[0] = _26_;
  assign _05_ = s0[1];
  assign _16_ = s1[1];
  assign sum_m[1] = _28_;
  assign _06_ = s0[2];
  assign _17_ = s1[2];
  assign sum_m[2] = _29_;
  assign _07_ = s0[3];
  assign _18_ = s1[3];
  assign sum_m[3] = _30_;
  assign _08_ = s0[4];
  assign _19_ = s1[4];
  assign sum_m[4] = _31_;
  assign _09_ = s0[5];
  assign _20_ = s1[5];
  assign sum_m[5] = _32_;
  assign _10_ = s0[6];
  assign _21_ = s1[6];
  assign sum_m[6] = _33_;
  assign _11_ = s0[7];
  assign _22_ = s1[7];
  assign sum_m[7] = _34_;
  assign _12_ = s0[8];
  assign _23_ = s1[8];
  assign sum_m[8] = _35_;
  assign _13_ = s0[9];
  assign _24_ = s1[9];
  assign sum_m[9] = _36_;
  assign _04_ = s0[10];
  assign _15_ = s1[10];
  assign sum_m[10] = _27_;
  assign _00_ = c0;
  assign _01_ = c1;
  assign cout_m = _02_;
endmodule

(* src = "csa2_64bit.v:58" *)
module mux_4(s0, s1, c0, c1, sel, sum_m, cout_m);
  (* src = "csa2_64bit.v:61" *)
  wire _00_;
  (* src = "csa2_64bit.v:61" *)
  wire _01_;
  (* src = "csa2_64bit.v:63" *)
  wire _02_;
  (* src = "csa2_64bit.v:60" *)
  wire _03_;
  (* src = "csa2_64bit.v:60" *)
  wire _04_;
  (* src = "csa2_64bit.v:60" *)
  wire _05_;
  (* src = "csa2_64bit.v:60" *)
  wire _06_;
  (* src = "csa2_64bit.v:60" *)
  wire _07_;
  (* src = "csa2_64bit.v:60" *)
  wire _08_;
  (* src = "csa2_64bit.v:60" *)
  wire _09_;
  (* src = "csa2_64bit.v:60" *)
  wire _10_;
  (* src = "csa2_64bit.v:59" *)
  wire _11_;
  (* src = "csa2_64bit.v:62" *)
  wire _12_;
  (* src = "csa2_64bit.v:62" *)
  wire _13_;
  (* src = "csa2_64bit.v:62" *)
  wire _14_;
  (* src = "csa2_64bit.v:62" *)
  wire _15_;
  (* src = "csa2_64bit.v:61" *)
  input c0;
  (* src = "csa2_64bit.v:61" *)
  input c1;
  (* src = "csa2_64bit.v:63" *)
  output cout_m;
  (* src = "csa2_64bit.v:60" *)
  input [3:0] s0;
  (* src = "csa2_64bit.v:60" *)
  input [3:0] s1;
  (* src = "csa2_64bit.v:59" *)
  input sel;
  (* src = "csa2_64bit.v:62" *)
  output [3:0] sum_m;
  MUX2_X1 _16_ (
    .A(_03_),
    .B(_07_),
    .S(_11_),
    .Z(_12_)
  );
  MUX2_X1 _17_ (
    .A(_04_),
    .B(_08_),
    .S(_11_),
    .Z(_13_)
  );
  MUX2_X1 _18_ (
    .A(_05_),
    .B(_09_),
    .S(_11_),
    .Z(_14_)
  );
  MUX2_X1 _19_ (
    .A(_06_),
    .B(_10_),
    .S(_11_),
    .Z(_15_)
  );
  MUX2_X1 _20_ (
    .A(_00_),
    .B(_01_),
    .S(_11_),
    .Z(_02_)
  );
  assign _03_ = s0[0];
  assign _07_ = s1[0];
  assign _11_ = sel;
  assign sum_m[0] = _12_;
  assign _04_ = s0[1];
  assign _08_ = s1[1];
  assign sum_m[1] = _13_;
  assign _05_ = s0[2];
  assign _09_ = s1[2];
  assign sum_m[2] = _14_;
  assign _06_ = s0[3];
  assign _10_ = s1[3];
  assign sum_m[3] = _15_;
  assign _00_ = c0;
  assign _01_ = c1;
  assign cout_m = _02_;
endmodule

(* src = "csa2_64bit.v:71" *)
module mux_5(s0, s1, c0, c1, sel, sum_m, cout_m);
  (* src = "csa2_64bit.v:74" *)
  wire _00_;
  (* src = "csa2_64bit.v:74" *)
  wire _01_;
  (* src = "csa2_64bit.v:76" *)
  wire _02_;
  (* src = "csa2_64bit.v:73" *)
  wire _03_;
  (* src = "csa2_64bit.v:73" *)
  wire _04_;
  (* src = "csa2_64bit.v:73" *)
  wire _05_;
  (* src = "csa2_64bit.v:73" *)
  wire _06_;
  (* src = "csa2_64bit.v:73" *)
  wire _07_;
  (* src = "csa2_64bit.v:73" *)
  wire _08_;
  (* src = "csa2_64bit.v:73" *)
  wire _09_;
  (* src = "csa2_64bit.v:73" *)
  wire _10_;
  (* src = "csa2_64bit.v:73" *)
  wire _11_;
  (* src = "csa2_64bit.v:73" *)
  wire _12_;
  (* src = "csa2_64bit.v:72" *)
  wire _13_;
  (* src = "csa2_64bit.v:75" *)
  wire _14_;
  (* src = "csa2_64bit.v:75" *)
  wire _15_;
  (* src = "csa2_64bit.v:75" *)
  wire _16_;
  (* src = "csa2_64bit.v:75" *)
  wire _17_;
  (* src = "csa2_64bit.v:75" *)
  wire _18_;
  (* src = "csa2_64bit.v:74" *)
  input c0;
  (* src = "csa2_64bit.v:74" *)
  input c1;
  (* src = "csa2_64bit.v:76" *)
  output cout_m;
  (* src = "csa2_64bit.v:73" *)
  input [4:0] s0;
  (* src = "csa2_64bit.v:73" *)
  input [4:0] s1;
  (* src = "csa2_64bit.v:72" *)
  input sel;
  (* src = "csa2_64bit.v:75" *)
  output [4:0] sum_m;
  MUX2_X1 _19_ (
    .A(_03_),
    .B(_08_),
    .S(_13_),
    .Z(_14_)
  );
  MUX2_X1 _20_ (
    .A(_04_),
    .B(_09_),
    .S(_13_),
    .Z(_15_)
  );
  MUX2_X1 _21_ (
    .A(_05_),
    .B(_10_),
    .S(_13_),
    .Z(_16_)
  );
  MUX2_X1 _22_ (
    .A(_06_),
    .B(_11_),
    .S(_13_),
    .Z(_17_)
  );
  MUX2_X1 _23_ (
    .A(_07_),
    .B(_12_),
    .S(_13_),
    .Z(_18_)
  );
  MUX2_X1 _24_ (
    .A(_00_),
    .B(_01_),
    .S(_13_),
    .Z(_02_)
  );
  assign _03_ = s0[0];
  assign _08_ = s1[0];
  assign _13_ = sel;
  assign sum_m[0] = _14_;
  assign _04_ = s0[1];
  assign _09_ = s1[1];
  assign sum_m[1] = _15_;
  assign _05_ = s0[2];
  assign _10_ = s1[2];
  assign sum_m[2] = _16_;
  assign _06_ = s0[3];
  assign _11_ = s1[3];
  assign sum_m[3] = _17_;
  assign _07_ = s0[4];
  assign _12_ = s1[4];
  assign sum_m[4] = _18_;
  assign _00_ = c0;
  assign _01_ = c1;
  assign cout_m = _02_;
endmodule

(* src = "csa2_64bit.v:86" *)
module mux_6(s0, s1, c0, c1, sel, sum_m, cout_m);
  (* src = "csa2_64bit.v:89" *)
  wire _00_;
  (* src = "csa2_64bit.v:89" *)
  wire _01_;
  (* src = "csa2_64bit.v:91" *)
  wire _02_;
  (* src = "csa2_64bit.v:88" *)
  wire _03_;
  (* src = "csa2_64bit.v:88" *)
  wire _04_;
  (* src = "csa2_64bit.v:88" *)
  wire _05_;
  (* src = "csa2_64bit.v:88" *)
  wire _06_;
  (* src = "csa2_64bit.v:88" *)
  wire _07_;
  (* src = "csa2_64bit.v:88" *)
  wire _08_;
  (* src = "csa2_64bit.v:88" *)
  wire _09_;
  (* src = "csa2_64bit.v:88" *)
  wire _10_;
  (* src = "csa2_64bit.v:88" *)
  wire _11_;
  (* src = "csa2_64bit.v:88" *)
  wire _12_;
  (* src = "csa2_64bit.v:88" *)
  wire _13_;
  (* src = "csa2_64bit.v:88" *)
  wire _14_;
  (* src = "csa2_64bit.v:87" *)
  wire _15_;
  (* src = "csa2_64bit.v:90" *)
  wire _16_;
  (* src = "csa2_64bit.v:90" *)
  wire _17_;
  (* src = "csa2_64bit.v:90" *)
  wire _18_;
  (* src = "csa2_64bit.v:90" *)
  wire _19_;
  (* src = "csa2_64bit.v:90" *)
  wire _20_;
  (* src = "csa2_64bit.v:90" *)
  wire _21_;
  (* src = "csa2_64bit.v:89" *)
  input c0;
  (* src = "csa2_64bit.v:89" *)
  input c1;
  (* src = "csa2_64bit.v:91" *)
  output cout_m;
  (* src = "csa2_64bit.v:88" *)
  input [5:0] s0;
  (* src = "csa2_64bit.v:88" *)
  input [5:0] s1;
  (* src = "csa2_64bit.v:87" *)
  input sel;
  (* src = "csa2_64bit.v:90" *)
  output [5:0] sum_m;
  MUX2_X1 _22_ (
    .A(_03_),
    .B(_09_),
    .S(_15_),
    .Z(_16_)
  );
  MUX2_X1 _23_ (
    .A(_04_),
    .B(_10_),
    .S(_15_),
    .Z(_17_)
  );
  MUX2_X1 _24_ (
    .A(_05_),
    .B(_11_),
    .S(_15_),
    .Z(_18_)
  );
  MUX2_X1 _25_ (
    .A(_06_),
    .B(_12_),
    .S(_15_),
    .Z(_19_)
  );
  MUX2_X1 _26_ (
    .A(_07_),
    .B(_13_),
    .S(_15_),
    .Z(_20_)
  );
  MUX2_X1 _27_ (
    .A(_08_),
    .B(_14_),
    .S(_15_),
    .Z(_21_)
  );
  MUX2_X1 _28_ (
    .A(_00_),
    .B(_01_),
    .S(_15_),
    .Z(_02_)
  );
  assign _03_ = s0[0];
  assign _09_ = s1[0];
  assign _15_ = sel;
  assign sum_m[0] = _16_;
  assign _04_ = s0[1];
  assign _10_ = s1[1];
  assign sum_m[1] = _17_;
  assign _05_ = s0[2];
  assign _11_ = s1[2];
  assign sum_m[2] = _18_;
  assign _06_ = s0[3];
  assign _12_ = s1[3];
  assign sum_m[3] = _19_;
  assign _07_ = s0[4];
  assign _13_ = s1[4];
  assign sum_m[4] = _20_;
  assign _08_ = s0[5];
  assign _14_ = s1[5];
  assign sum_m[5] = _21_;
  assign _00_ = c0;
  assign _01_ = c1;
  assign cout_m = _02_;
endmodule

(* src = "csa2_64bit.v:99" *)
module mux_7(s0, s1, c0, c1, sel, sum_m, cout_m);
  (* src = "csa2_64bit.v:102" *)
  wire _00_;
  (* src = "csa2_64bit.v:102" *)
  wire _01_;
  (* src = "csa2_64bit.v:104" *)
  wire _02_;
  (* src = "csa2_64bit.v:101" *)
  wire _03_;
  (* src = "csa2_64bit.v:101" *)
  wire _04_;
  (* src = "csa2_64bit.v:101" *)
  wire _05_;
  (* src = "csa2_64bit.v:101" *)
  wire _06_;
  (* src = "csa2_64bit.v:101" *)
  wire _07_;
  (* src = "csa2_64bit.v:101" *)
  wire _08_;
  (* src = "csa2_64bit.v:101" *)
  wire _09_;
  (* src = "csa2_64bit.v:101" *)
  wire _10_;
  (* src = "csa2_64bit.v:101" *)
  wire _11_;
  (* src = "csa2_64bit.v:101" *)
  wire _12_;
  (* src = "csa2_64bit.v:101" *)
  wire _13_;
  (* src = "csa2_64bit.v:101" *)
  wire _14_;
  (* src = "csa2_64bit.v:101" *)
  wire _15_;
  (* src = "csa2_64bit.v:101" *)
  wire _16_;
  (* src = "csa2_64bit.v:100" *)
  wire _17_;
  (* src = "csa2_64bit.v:103" *)
  wire _18_;
  (* src = "csa2_64bit.v:103" *)
  wire _19_;
  (* src = "csa2_64bit.v:103" *)
  wire _20_;
  (* src = "csa2_64bit.v:103" *)
  wire _21_;
  (* src = "csa2_64bit.v:103" *)
  wire _22_;
  (* src = "csa2_64bit.v:103" *)
  wire _23_;
  (* src = "csa2_64bit.v:103" *)
  wire _24_;
  (* src = "csa2_64bit.v:102" *)
  input c0;
  (* src = "csa2_64bit.v:102" *)
  input c1;
  (* src = "csa2_64bit.v:104" *)
  output cout_m;
  (* src = "csa2_64bit.v:101" *)
  input [6:0] s0;
  (* src = "csa2_64bit.v:101" *)
  input [6:0] s1;
  (* src = "csa2_64bit.v:100" *)
  input sel;
  (* src = "csa2_64bit.v:103" *)
  output [6:0] sum_m;
  MUX2_X1 _25_ (
    .A(_03_),
    .B(_10_),
    .S(_17_),
    .Z(_18_)
  );
  MUX2_X1 _26_ (
    .A(_04_),
    .B(_11_),
    .S(_17_),
    .Z(_19_)
  );
  MUX2_X1 _27_ (
    .A(_05_),
    .B(_12_),
    .S(_17_),
    .Z(_20_)
  );
  MUX2_X1 _28_ (
    .A(_06_),
    .B(_13_),
    .S(_17_),
    .Z(_21_)
  );
  MUX2_X1 _29_ (
    .A(_07_),
    .B(_14_),
    .S(_17_),
    .Z(_22_)
  );
  MUX2_X1 _30_ (
    .A(_08_),
    .B(_15_),
    .S(_17_),
    .Z(_23_)
  );
  MUX2_X1 _31_ (
    .A(_09_),
    .B(_16_),
    .S(_17_),
    .Z(_24_)
  );
  MUX2_X1 _32_ (
    .A(_00_),
    .B(_01_),
    .S(_17_),
    .Z(_02_)
  );
  assign _03_ = s0[0];
  assign _10_ = s1[0];
  assign _17_ = sel;
  assign sum_m[0] = _18_;
  assign _04_ = s0[1];
  assign _11_ = s1[1];
  assign sum_m[1] = _19_;
  assign _05_ = s0[2];
  assign _12_ = s1[2];
  assign sum_m[2] = _20_;
  assign _06_ = s0[3];
  assign _13_ = s1[3];
  assign sum_m[3] = _21_;
  assign _07_ = s0[4];
  assign _14_ = s1[4];
  assign sum_m[4] = _22_;
  assign _08_ = s0[5];
  assign _15_ = s1[5];
  assign sum_m[5] = _23_;
  assign _09_ = s0[6];
  assign _16_ = s1[6];
  assign sum_m[6] = _24_;
  assign _00_ = c0;
  assign _01_ = c1;
  assign cout_m = _02_;
endmodule

(* src = "csa2_64bit.v:113" *)
module mux_8(s0, s1, c0, c1, sel, sum_m, cout_m);
  (* src = "csa2_64bit.v:116" *)
  wire _00_;
  (* src = "csa2_64bit.v:116" *)
  wire _01_;
  (* src = "csa2_64bit.v:118" *)
  wire _02_;
  (* src = "csa2_64bit.v:115" *)
  wire _03_;
  (* src = "csa2_64bit.v:115" *)
  wire _04_;
  (* src = "csa2_64bit.v:115" *)
  wire _05_;
  (* src = "csa2_64bit.v:115" *)
  wire _06_;
  (* src = "csa2_64bit.v:115" *)
  wire _07_;
  (* src = "csa2_64bit.v:115" *)
  wire _08_;
  (* src = "csa2_64bit.v:115" *)
  wire _09_;
  (* src = "csa2_64bit.v:115" *)
  wire _10_;
  (* src = "csa2_64bit.v:115" *)
  wire _11_;
  (* src = "csa2_64bit.v:115" *)
  wire _12_;
  (* src = "csa2_64bit.v:115" *)
  wire _13_;
  (* src = "csa2_64bit.v:115" *)
  wire _14_;
  (* src = "csa2_64bit.v:115" *)
  wire _15_;
  (* src = "csa2_64bit.v:115" *)
  wire _16_;
  (* src = "csa2_64bit.v:115" *)
  wire _17_;
  (* src = "csa2_64bit.v:115" *)
  wire _18_;
  (* src = "csa2_64bit.v:114" *)
  wire _19_;
  (* src = "csa2_64bit.v:117" *)
  wire _20_;
  (* src = "csa2_64bit.v:117" *)
  wire _21_;
  (* src = "csa2_64bit.v:117" *)
  wire _22_;
  (* src = "csa2_64bit.v:117" *)
  wire _23_;
  (* src = "csa2_64bit.v:117" *)
  wire _24_;
  (* src = "csa2_64bit.v:117" *)
  wire _25_;
  (* src = "csa2_64bit.v:117" *)
  wire _26_;
  (* src = "csa2_64bit.v:117" *)
  wire _27_;
  (* src = "csa2_64bit.v:116" *)
  input c0;
  (* src = "csa2_64bit.v:116" *)
  input c1;
  (* src = "csa2_64bit.v:118" *)
  output cout_m;
  (* src = "csa2_64bit.v:115" *)
  input [7:0] s0;
  (* src = "csa2_64bit.v:115" *)
  input [7:0] s1;
  (* src = "csa2_64bit.v:114" *)
  input sel;
  (* src = "csa2_64bit.v:117" *)
  output [7:0] sum_m;
  MUX2_X1 _28_ (
    .A(_03_),
    .B(_11_),
    .S(_19_),
    .Z(_20_)
  );
  MUX2_X1 _29_ (
    .A(_04_),
    .B(_12_),
    .S(_19_),
    .Z(_21_)
  );
  MUX2_X1 _30_ (
    .A(_05_),
    .B(_13_),
    .S(_19_),
    .Z(_22_)
  );
  MUX2_X1 _31_ (
    .A(_06_),
    .B(_14_),
    .S(_19_),
    .Z(_23_)
  );
  MUX2_X1 _32_ (
    .A(_07_),
    .B(_15_),
    .S(_19_),
    .Z(_24_)
  );
  MUX2_X1 _33_ (
    .A(_08_),
    .B(_16_),
    .S(_19_),
    .Z(_25_)
  );
  MUX2_X1 _34_ (
    .A(_09_),
    .B(_17_),
    .S(_19_),
    .Z(_26_)
  );
  MUX2_X1 _35_ (
    .A(_10_),
    .B(_18_),
    .S(_19_),
    .Z(_27_)
  );
  MUX2_X1 _36_ (
    .A(_00_),
    .B(_01_),
    .S(_19_),
    .Z(_02_)
  );
  assign _03_ = s0[0];
  assign _11_ = s1[0];
  assign _19_ = sel;
  assign sum_m[0] = _20_;
  assign _04_ = s0[1];
  assign _12_ = s1[1];
  assign sum_m[1] = _21_;
  assign _05_ = s0[2];
  assign _13_ = s1[2];
  assign sum_m[2] = _22_;
  assign _06_ = s0[3];
  assign _14_ = s1[3];
  assign sum_m[3] = _23_;
  assign _07_ = s0[4];
  assign _15_ = s1[4];
  assign sum_m[4] = _24_;
  assign _08_ = s0[5];
  assign _16_ = s1[5];
  assign sum_m[5] = _25_;
  assign _09_ = s0[6];
  assign _17_ = s1[6];
  assign sum_m[6] = _26_;
  assign _10_ = s0[7];
  assign _18_ = s1[7];
  assign sum_m[7] = _27_;
  assign _00_ = c0;
  assign _01_ = c1;
  assign cout_m = _02_;
endmodule

(* src = "csa2_64bit.v:127" *)
module mux_9(s0, s1, c0, c1, sel, sum_m, cout_m);
  (* src = "csa2_64bit.v:130" *)
  wire _00_;
  (* src = "csa2_64bit.v:130" *)
  wire _01_;
  (* src = "csa2_64bit.v:132" *)
  wire _02_;
  (* src = "csa2_64bit.v:129" *)
  wire _03_;
  (* src = "csa2_64bit.v:129" *)
  wire _04_;
  (* src = "csa2_64bit.v:129" *)
  wire _05_;
  (* src = "csa2_64bit.v:129" *)
  wire _06_;
  (* src = "csa2_64bit.v:129" *)
  wire _07_;
  (* src = "csa2_64bit.v:129" *)
  wire _08_;
  (* src = "csa2_64bit.v:129" *)
  wire _09_;
  (* src = "csa2_64bit.v:129" *)
  wire _10_;
  (* src = "csa2_64bit.v:129" *)
  wire _11_;
  (* src = "csa2_64bit.v:129" *)
  wire _12_;
  (* src = "csa2_64bit.v:129" *)
  wire _13_;
  (* src = "csa2_64bit.v:129" *)
  wire _14_;
  (* src = "csa2_64bit.v:129" *)
  wire _15_;
  (* src = "csa2_64bit.v:129" *)
  wire _16_;
  (* src = "csa2_64bit.v:129" *)
  wire _17_;
  (* src = "csa2_64bit.v:129" *)
  wire _18_;
  (* src = "csa2_64bit.v:129" *)
  wire _19_;
  (* src = "csa2_64bit.v:129" *)
  wire _20_;
  (* src = "csa2_64bit.v:128" *)
  wire _21_;
  (* src = "csa2_64bit.v:131" *)
  wire _22_;
  (* src = "csa2_64bit.v:131" *)
  wire _23_;
  (* src = "csa2_64bit.v:131" *)
  wire _24_;
  (* src = "csa2_64bit.v:131" *)
  wire _25_;
  (* src = "csa2_64bit.v:131" *)
  wire _26_;
  (* src = "csa2_64bit.v:131" *)
  wire _27_;
  (* src = "csa2_64bit.v:131" *)
  wire _28_;
  (* src = "csa2_64bit.v:131" *)
  wire _29_;
  (* src = "csa2_64bit.v:131" *)
  wire _30_;
  (* src = "csa2_64bit.v:130" *)
  input c0;
  (* src = "csa2_64bit.v:130" *)
  input c1;
  (* src = "csa2_64bit.v:132" *)
  output cout_m;
  (* src = "csa2_64bit.v:129" *)
  input [8:0] s0;
  (* src = "csa2_64bit.v:129" *)
  input [8:0] s1;
  (* src = "csa2_64bit.v:128" *)
  input sel;
  (* src = "csa2_64bit.v:131" *)
  output [8:0] sum_m;
  MUX2_X1 _31_ (
    .A(_03_),
    .B(_12_),
    .S(_21_),
    .Z(_22_)
  );
  MUX2_X1 _32_ (
    .A(_04_),
    .B(_13_),
    .S(_21_),
    .Z(_23_)
  );
  MUX2_X1 _33_ (
    .A(_05_),
    .B(_14_),
    .S(_21_),
    .Z(_24_)
  );
  MUX2_X1 _34_ (
    .A(_06_),
    .B(_15_),
    .S(_21_),
    .Z(_25_)
  );
  MUX2_X1 _35_ (
    .A(_07_),
    .B(_16_),
    .S(_21_),
    .Z(_26_)
  );
  MUX2_X1 _36_ (
    .A(_08_),
    .B(_17_),
    .S(_21_),
    .Z(_27_)
  );
  MUX2_X1 _37_ (
    .A(_09_),
    .B(_18_),
    .S(_21_),
    .Z(_28_)
  );
  MUX2_X1 _38_ (
    .A(_10_),
    .B(_19_),
    .S(_21_),
    .Z(_29_)
  );
  MUX2_X1 _39_ (
    .A(_11_),
    .B(_20_),
    .S(_21_),
    .Z(_30_)
  );
  MUX2_X1 _40_ (
    .A(_00_),
    .B(_01_),
    .S(_21_),
    .Z(_02_)
  );
  assign _03_ = s0[0];
  assign _12_ = s1[0];
  assign _21_ = sel;
  assign sum_m[0] = _22_;
  assign _04_ = s0[1];
  assign _13_ = s1[1];
  assign sum_m[1] = _23_;
  assign _05_ = s0[2];
  assign _14_ = s1[2];
  assign sum_m[2] = _24_;
  assign _06_ = s0[3];
  assign _15_ = s1[3];
  assign sum_m[3] = _25_;
  assign _07_ = s0[4];
  assign _16_ = s1[4];
  assign sum_m[4] = _26_;
  assign _08_ = s0[5];
  assign _17_ = s1[5];
  assign sum_m[5] = _27_;
  assign _09_ = s0[6];
  assign _18_ = s1[6];
  assign sum_m[6] = _28_;
  assign _10_ = s0[7];
  assign _19_ = s1[7];
  assign sum_m[7] = _29_;
  assign _11_ = s0[8];
  assign _20_ = s1[8];
  assign sum_m[8] = _30_;
  assign _00_ = c0;
  assign _01_ = c1;
  assign cout_m = _02_;
endmodule
