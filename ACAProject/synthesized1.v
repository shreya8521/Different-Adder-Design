/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "cla_64bit.v:2" *)
module cla64b(op1, op2, sum, clock, crout, reset);
  wire _0000_;
  wire _0001_;
  wire _0002_;
  wire _0003_;
  wire _0004_;
  wire _0005_;
  wire _0006_;
  wire _0007_;
  wire _0008_;
  wire _0009_;
  wire _0010_;
  wire _0011_;
  wire _0012_;
  wire _0013_;
  wire _0014_;
  wire _0015_;
  wire _0016_;
  wire _0017_;
  wire _0018_;
  wire _0019_;
  wire _0020_;
  wire _0021_;
  wire _0022_;
  wire _0023_;
  wire _0024_;
  wire _0025_;
  wire _0026_;
  wire _0027_;
  wire _0028_;
  wire _0029_;
  wire _0030_;
  wire _0031_;
  wire _0032_;
  wire _0033_;
  wire _0034_;
  wire _0035_;
  wire _0036_;
  wire _0037_;
  wire _0038_;
  wire _0039_;
  wire _0040_;
  wire _0041_;
  wire _0042_;
  wire _0043_;
  wire _0044_;
  wire _0045_;
  wire _0046_;
  wire _0047_;
  wire _0048_;
  wire _0049_;
  wire _0050_;
  wire _0051_;
  wire _0052_;
  wire _0053_;
  wire _0054_;
  wire _0055_;
  wire _0056_;
  wire _0057_;
  wire _0058_;
  wire _0059_;
  wire _0060_;
  wire _0061_;
  wire _0062_;
  wire _0063_;
  wire _0064_;
  wire _0065_;
  wire _0066_;
  wire _0067_;
  wire _0068_;
  wire _0069_;
  wire _0070_;
  wire _0071_;
  wire _0072_;
  wire _0073_;
  wire _0074_;
  wire _0075_;
  wire _0076_;
  wire _0077_;
  wire _0078_;
  wire _0079_;
  wire _0080_;
  wire _0081_;
  wire _0082_;
  wire _0083_;
  wire _0084_;
  wire _0085_;
  wire _0086_;
  wire _0087_;
  wire _0088_;
  wire _0089_;
  wire _0090_;
  wire _0091_;
  wire _0092_;
  wire _0093_;
  wire _0094_;
  wire _0095_;
  wire _0096_;
  wire _0097_;
  wire _0098_;
  wire _0099_;
  wire _0100_;
  wire _0101_;
  wire _0102_;
  wire _0103_;
  wire _0104_;
  wire _0105_;
  wire _0106_;
  wire _0107_;
  wire _0108_;
  wire _0109_;
  wire _0110_;
  wire _0111_;
  wire _0112_;
  wire _0113_;
  wire _0114_;
  wire _0115_;
  wire _0116_;
  wire _0117_;
  wire _0118_;
  wire _0119_;
  wire _0120_;
  wire _0121_;
  wire _0122_;
  wire _0123_;
  wire _0124_;
  wire _0125_;
  wire _0126_;
  wire _0127_;
  wire _0128_;
  wire _0129_;
  wire _0130_;
  wire _0131_;
  wire _0132_;
  wire _0133_;
  wire _0134_;
  wire _0135_;
  wire _0136_;
  wire _0137_;
  wire _0138_;
  wire _0139_;
  wire _0140_;
  wire _0141_;
  wire _0142_;
  wire _0143_;
  wire _0144_;
  wire _0145_;
  wire _0146_;
  wire _0147_;
  wire _0148_;
  wire _0149_;
  wire _0150_;
  wire _0151_;
  wire _0152_;
  wire _0153_;
  wire _0154_;
  wire _0155_;
  wire _0156_;
  wire _0157_;
  wire _0158_;
  wire _0159_;
  wire _0160_;
  wire _0161_;
  wire _0162_;
  wire _0163_;
  wire _0164_;
  wire _0165_;
  wire _0166_;
  wire _0167_;
  wire _0168_;
  wire _0169_;
  wire _0170_;
  wire _0171_;
  wire _0172_;
  wire _0173_;
  wire _0174_;
  wire _0175_;
  wire _0176_;
  wire _0177_;
  wire _0178_;
  wire _0179_;
  wire _0180_;
  wire _0181_;
  wire _0182_;
  wire _0183_;
  wire _0184_;
  wire _0185_;
  wire _0186_;
  wire _0187_;
  wire _0188_;
  wire _0189_;
  wire _0190_;
  wire _0191_;
  wire _0192_;
  wire _0193_;
  wire _0194_;
  wire _0195_;
  wire _0196_;
  wire _0197_;
  wire _0198_;
  wire _0199_;
  wire _0200_;
  wire _0201_;
  wire _0202_;
  wire _0203_;
  wire _0204_;
  wire _0205_;
  wire _0206_;
  wire _0207_;
  wire _0208_;
  wire _0209_;
  wire _0210_;
  wire _0211_;
  wire _0212_;
  wire _0213_;
  wire _0214_;
  wire _0215_;
  wire _0216_;
  wire _0217_;
  wire _0218_;
  wire _0219_;
  wire _0220_;
  wire _0221_;
  wire _0222_;
  wire _0223_;
  wire _0224_;
  wire _0225_;
  wire _0226_;
  wire _0227_;
  wire _0228_;
  wire _0229_;
  wire _0230_;
  wire _0231_;
  wire _0232_;
  wire _0233_;
  wire _0234_;
  wire _0235_;
  wire _0236_;
  wire _0237_;
  wire _0238_;
  wire _0239_;
  wire _0240_;
  wire _0241_;
  wire _0242_;
  wire _0243_;
  wire _0244_;
  wire _0245_;
  wire _0246_;
  wire _0247_;
  wire _0248_;
  wire _0249_;
  wire _0250_;
  wire _0251_;
  wire _0252_;
  wire _0253_;
  wire _0254_;
  wire _0255_;
  wire _0256_;
  wire _0257_;
  wire _0258_;
  (* src = "cla_64bit.v:13" *)
  wire _0259_;
  (* src = "cla_64bit.v:13" *)
  wire _0260_;
  (* src = "cla_64bit.v:13" *)
  wire _0261_;
  (* src = "cla_64bit.v:13" *)
  wire _0262_;
  (* src = "cla_64bit.v:13" *)
  wire _0263_;
  (* src = "cla_64bit.v:13" *)
  wire _0264_;
  (* src = "cla_64bit.v:13" *)
  wire _0265_;
  (* src = "cla_64bit.v:13" *)
  wire _0266_;
  (* src = "cla_64bit.v:13" *)
  wire _0267_;
  (* src = "cla_64bit.v:13" *)
  wire _0268_;
  (* src = "cla_64bit.v:13" *)
  wire _0269_;
  (* src = "cla_64bit.v:13" *)
  wire _0270_;
  (* src = "cla_64bit.v:13" *)
  wire _0271_;
  (* src = "cla_64bit.v:13" *)
  wire _0272_;
  (* src = "cla_64bit.v:13" *)
  wire _0273_;
  (* src = "cla_64bit.v:13" *)
  wire _0274_;
  (* src = "cla_64bit.v:13" *)
  wire _0275_;
  (* src = "cla_64bit.v:13" *)
  wire _0276_;
  (* src = "cla_64bit.v:13" *)
  wire _0277_;
  (* src = "cla_64bit.v:13" *)
  wire _0278_;
  (* src = "cla_64bit.v:13" *)
  wire _0279_;
  (* src = "cla_64bit.v:13" *)
  wire _0280_;
  (* src = "cla_64bit.v:13" *)
  wire _0281_;
  (* src = "cla_64bit.v:13" *)
  wire _0282_;
  (* src = "cla_64bit.v:13" *)
  wire _0283_;
  (* src = "cla_64bit.v:13" *)
  wire _0284_;
  (* src = "cla_64bit.v:13" *)
  wire _0285_;
  (* src = "cla_64bit.v:13" *)
  wire _0286_;
  (* src = "cla_64bit.v:13" *)
  wire _0287_;
  (* src = "cla_64bit.v:13" *)
  wire _0288_;
  (* src = "cla_64bit.v:13" *)
  wire _0289_;
  wire _0290_;
  wire _0291_;
  wire _0292_;
  wire _0293_;
  wire _0294_;
  wire _0295_;
  wire _0296_;
  wire _0297_;
  wire _0298_;
  wire _0299_;
  wire _0300_;
  wire _0301_;
  wire _0302_;
  wire _0303_;
  wire _0304_;
  wire _0305_;
  wire _0306_;
  wire _0307_;
  wire _0308_;
  wire _0309_;
  wire _0310_;
  wire _0311_;
  wire _0312_;
  wire _0313_;
  wire _0314_;
  wire _0315_;
  wire _0316_;
  wire _0317_;
  wire _0318_;
  wire _0319_;
  wire _0320_;
  wire _0321_;
  wire _0322_;
  wire _0323_;
  wire _0324_;
  wire _0325_;
  wire _0326_;
  wire _0327_;
  wire _0328_;
  wire _0329_;
  wire _0330_;
  wire _0331_;
  wire _0332_;
  wire _0333_;
  wire _0334_;
  wire _0335_;
  wire _0336_;
  wire _0337_;
  wire _0338_;
  wire _0339_;
  wire _0340_;
  wire _0341_;
  wire _0342_;
  wire _0343_;
  wire _0344_;
  wire _0345_;
  wire _0346_;
  wire _0347_;
  wire _0348_;
  wire _0349_;
  wire _0350_;
  wire _0351_;
  wire _0352_;
  wire _0353_;
  wire _0354_;
  wire _0355_;
  wire _0356_;
  wire _0357_;
  wire _0358_;
  wire _0359_;
  wire _0360_;
  wire _0361_;
  wire _0362_;
  wire _0363_;
  wire _0364_;
  wire _0365_;
  wire _0366_;
  wire _0367_;
  wire _0368_;
  wire _0369_;
  wire _0370_;
  wire _0371_;
  wire _0372_;
  wire _0373_;
  wire _0374_;
  wire _0375_;
  wire _0376_;
  wire _0377_;
  wire _0378_;
  wire _0379_;
  wire _0380_;
  wire _0381_;
  wire _0382_;
  wire _0383_;
  wire _0384_;
  wire _0385_;
  wire _0386_;
  wire _0387_;
  wire _0388_;
  wire _0389_;
  wire _0390_;
  wire _0391_;
  wire _0392_;
  wire _0393_;
  wire _0394_;
  wire _0395_;
  wire _0396_;
  wire _0397_;
  wire _0398_;
  wire _0399_;
  wire _0400_;
  wire _0401_;
  wire _0402_;
  wire _0403_;
  wire _0404_;
  wire _0405_;
  wire _0406_;
  wire _0407_;
  wire _0408_;
  wire _0409_;
  wire _0410_;
  wire _0411_;
  wire _0412_;
  wire _0413_;
  wire _0414_;
  wire _0415_;
  wire _0416_;
  wire _0417_;
  wire _0418_;
  wire _0419_;
  wire _0420_;
  wire _0421_;
  wire _0422_;
  wire _0423_;
  wire _0424_;
  wire _0425_;
  wire _0426_;
  wire _0427_;
  wire _0428_;
  wire _0429_;
  wire _0430_;
  wire _0431_;
  wire _0432_;
  wire _0433_;
  wire _0434_;
  wire _0435_;
  wire _0436_;
  wire _0437_;
  wire _0438_;
  wire _0439_;
  wire _0440_;
  wire _0441_;
  wire _0442_;
  wire _0443_;
  wire _0444_;
  wire _0445_;
  wire _0446_;
  wire _0447_;
  wire _0448_;
  wire _0449_;
  wire _0450_;
  wire _0451_;
  wire _0452_;
  wire _0453_;
  wire _0454_;
  wire _0455_;
  wire _0456_;
  wire _0457_;
  wire _0458_;
  wire _0459_;
  wire _0460_;
  wire _0461_;
  wire _0462_;
  wire _0463_;
  wire _0464_;
  wire _0465_;
  wire _0466_;
  wire _0467_;
  wire _0468_;
  wire _0469_;
  wire _0470_;
  wire _0471_;
  wire _0472_;
  wire _0473_;
  wire _0474_;
  wire _0475_;
  wire _0476_;
  wire _0477_;
  wire _0478_;
  wire _0479_;
  wire _0480_;
  wire _0481_;
  wire _0482_;
  (* src = "cla_64bit.v:12" *)
  wire _0483_;
  (* src = "cla_64bit.v:12" *)
  wire _0484_;
  (* src = "cla_64bit.v:12" *)
  wire _0485_;
  (* src = "cla_64bit.v:12" *)
  wire _0486_;
  (* src = "cla_64bit.v:12" *)
  wire _0487_;
  (* src = "cla_64bit.v:12" *)
  wire _0488_;
  (* src = "cla_64bit.v:12" *)
  wire _0489_;
  (* src = "cla_64bit.v:12" *)
  wire _0490_;
  (* src = "cla_64bit.v:12" *)
  wire _0491_;
  (* src = "cla_64bit.v:12" *)
  wire _0492_;
  (* src = "cla_64bit.v:12" *)
  wire _0493_;
  (* src = "cla_64bit.v:12" *)
  wire _0494_;
  (* src = "cla_64bit.v:12" *)
  wire _0495_;
  (* src = "cla_64bit.v:12" *)
  wire _0496_;
  wire _0497_;
  wire _0498_;
  wire _0499_;
  wire _0500_;
  wire _0501_;
  wire _0502_;
  wire _0503_;
  wire _0504_;
  wire _0505_;
  wire _0506_;
  wire _0507_;
  wire _0508_;
  wire _0509_;
  wire _0510_;
  wire _0511_;
  wire _0512_;
  wire _0513_;
  wire _0514_;
  wire _0515_;
  wire _0516_;
  wire _0517_;
  wire _0518_;
  wire _0519_;
  wire _0520_;
  wire _0521_;
  wire _0522_;
  wire _0523_;
  wire _0524_;
  wire _0525_;
  wire _0526_;
  wire _0527_;
  wire _0528_;
  wire _0529_;
  wire _0530_;
  wire _0531_;
  wire _0532_;
  wire _0533_;
  wire _0534_;
  wire _0535_;
  wire _0536_;
  wire _0537_;
  wire _0538_;
  wire _0539_;
  (* src = "cla_64bit.v:10" *)
  wire _0540_;
  (* src = "cla_64bit.v:5" *)
  wire _0541_;
  wire _0542_;
  wire _0543_;
  wire _0544_;
  wire _0545_;
  wire _0546_;
  wire _0547_;
  wire _0548_;
  wire _0549_;
  wire _0550_;
  wire _0551_;
  wire _0552_;
  wire _0553_;
  wire _0554_;
  wire _0555_;
  wire _0556_;
  wire _0557_;
  wire _0558_;
  wire _0559_;
  wire _0560_;
  wire _0561_;
  wire _0562_;
  wire _0563_;
  wire _0564_;
  wire _0565_;
  wire _0566_;
  wire _0567_;
  wire _0568_;
  wire _0569_;
  wire _0570_;
  wire _0571_;
  wire _0572_;
  wire _0573_;
  wire _0574_;
  wire _0575_;
  wire _0576_;
  wire _0577_;
  wire _0578_;
  wire _0579_;
  wire _0580_;
  wire _0581_;
  wire _0582_;
  wire _0583_;
  wire _0584_;
  wire _0585_;
  wire _0586_;
  wire _0587_;
  wire _0588_;
  wire _0589_;
  wire _0590_;
  wire _0591_;
  wire _0592_;
  wire _0593_;
  wire _0594_;
  wire _0595_;
  wire _0596_;
  wire _0597_;
  wire _0598_;
  wire _0599_;
  wire _0600_;
  wire _0601_;
  wire _0602_;
  wire _0603_;
  wire _0604_;
  wire _0605_;
  wire _0606_;
  wire _0607_;
  wire _0608_;
  wire _0609_;
  wire _0610_;
  wire _0611_;
  wire _0612_;
  wire _0613_;
  wire _0614_;
  wire _0615_;
  wire _0616_;
  wire _0617_;
  wire _0618_;
  wire _0619_;
  wire _0620_;
  wire _0621_;
  wire _0622_;
  wire _0623_;
  wire _0624_;
  wire _0625_;
  wire _0626_;
  wire _0627_;
  wire _0628_;
  wire _0629_;
  wire _0630_;
  wire _0631_;
  wire _0632_;
  wire _0633_;
  wire _0634_;
  wire _0635_;
  wire _0636_;
  wire _0637_;
  wire _0638_;
  wire _0639_;
  wire _0640_;
  wire _0641_;
  wire _0642_;
  wire _0643_;
  wire _0644_;
  wire _0645_;
  wire _0646_;
  wire _0647_;
  wire _0648_;
  wire _0649_;
  wire _0650_;
  wire _0651_;
  wire _0652_;
  wire _0653_;
  wire _0654_;
  wire _0655_;
  wire _0656_;
  wire _0657_;
  wire _0658_;
  wire _0659_;
  wire _0660_;
  wire _0661_;
  wire _0662_;
  wire _0663_;
  wire _0664_;
  wire _0665_;
  wire _0666_;
  wire _0667_;
  wire _0668_;
  wire _0669_;
  wire _0670_;
  wire _0671_;
  wire _0672_;
  wire _0673_;
  wire _0674_;
  wire _0675_;
  wire _0676_;
  wire _0677_;
  wire _0678_;
  wire _0679_;
  wire _0680_;
  wire _0681_;
  wire _0682_;
  wire _0683_;
  wire _0684_;
  wire _0685_;
  wire _0686_;
  wire _0687_;
  wire _0688_;
  wire _0689_;
  wire _0690_;
  wire _0691_;
  wire _0692_;
  wire _0693_;
  wire _0694_;
  wire _0695_;
  wire _0696_;
  wire _0697_;
  wire _0698_;
  wire _0699_;
  wire _0700_;
  wire _0701_;
  wire _0702_;
  wire _0703_;
  wire _0704_;
  wire _0705_;
  wire _0706_;
  wire _0707_;
  wire _0708_;
  wire _0709_;
  wire _0710_;
  wire _0711_;
  wire _0712_;
  wire _0713_;
  wire _0714_;
  wire _0715_;
  wire _0716_;
  wire _0717_;
  wire _0718_;
  wire _0719_;
  wire _0720_;
  wire _0721_;
  wire _0722_;
  wire _0723_;
  wire _0724_;
  wire _0725_;
  wire _0726_;
  wire _0727_;
  wire _0728_;
  wire _0729_;
  wire _0730_;
  wire _0731_;
  wire _0732_;
  wire _0733_;
  wire _0734_;
  wire _0735_;
  wire _0736_;
  wire _0737_;
  wire _0738_;
  wire _0739_;
  wire _0740_;
  wire _0741_;
  wire _0742_;
  wire _0743_;
  wire _0744_;
  wire _0745_;
  wire _0746_;
  wire _0747_;
  wire _0748_;
  wire _0749_;
  wire _0750_;
  wire _0751_;
  wire _0752_;
  wire _0753_;
  wire _0754_;
  wire _0755_;
  wire _0756_;
  wire _0757_;
  wire _0758_;
  wire _0759_;
  wire _0760_;
  wire _0761_;
  wire _0762_;
  wire _0763_;
  wire _0764_;
  wire _0765_;
  wire _0766_;
  wire _0767_;
  wire _0768_;
  wire _0769_;
  wire _0770_;
  wire _0771_;
  wire _0772_;
  wire _0773_;
  wire _0774_;
  wire _0775_;
  wire _0776_;
  wire _0777_;
  wire _0778_;
  wire _0779_;
  wire _0780_;
  wire _0781_;
  wire _0782_;
  wire _0783_;
  wire _0784_;
  wire _0785_;
  wire _0786_;
  wire _0787_;
  wire _0788_;
  wire _0789_;
  wire _0790_;
  wire _0791_;
  wire _0792_;
  wire _0793_;
  wire _0794_;
  wire _0795_;
  wire _0796_;
  wire _0797_;
  wire _0798_;
  wire _0799_;
  wire _0800_;
  wire _0801_;
  wire _0802_;
  wire _0803_;
  wire _0804_;
  wire _0805_;
  wire _0806_;
  wire _0807_;
  wire _0808_;
  wire _0809_;
  wire _0810_;
  wire _0811_;
  wire _0812_;
  wire _0813_;
  wire _0814_;
  wire _0815_;
  wire _0816_;
  wire _0817_;
  wire _0818_;
  wire _0819_;
  wire _0820_;
  wire _0821_;
  wire _0822_;
  wire _0823_;
  wire _0824_;
  wire _0825_;
  wire _0826_;
  wire _0827_;
  wire _0828_;
  wire _0829_;
  wire _0830_;
  wire _0831_;
  wire _0832_;
  wire _0833_;
  wire _0834_;
  wire _0835_;
  wire _0836_;
  wire _0837_;
  wire _0838_;
  wire _0839_;
  wire _0840_;
  wire _0841_;
  wire _0842_;
  wire _0843_;
  wire _0844_;
  wire _0845_;
  wire _0846_;
  wire _0847_;
  wire _0848_;
  wire _0849_;
  wire _0850_;
  wire _0851_;
  wire _0852_;
  wire _0853_;
  wire _0854_;
  wire _0855_;
  wire _0856_;
  wire _0857_;
  wire _0858_;
  wire _0859_;
  wire _0860_;
  wire _0861_;
  wire _0862_;
  wire _0863_;
  wire _0864_;
  wire _0865_;
  wire _0866_;
  wire _0867_;
  wire _0868_;
  wire _0869_;
  wire _0870_;
  wire _0871_;
  wire _0872_;
  wire _0873_;
  wire _0874_;
  wire _0875_;
  wire _0876_;
  wire _0877_;
  wire _0878_;
  wire _0879_;
  wire _0880_;
  wire _0881_;
  wire _0882_;
  wire _0883_;
  wire _0884_;
  wire _0885_;
  wire _0886_;
  wire _0887_;
  wire _0888_;
  wire _0889_;
  wire _0890_;
  wire _0891_;
  wire _0892_;
  wire _0893_;
  wire _0894_;
  wire _0895_;
  wire _0896_;
  wire _0897_;
  wire _0898_;
  wire _0899_;
  wire _0900_;
  wire _0901_;
  wire _0902_;
  wire _0903_;
  wire _0904_;
  wire _0905_;
  wire _0906_;
  wire _0907_;
  wire _0908_;
  wire _0909_;
  wire _0910_;
  wire _0911_;
  wire _0912_;
  wire _0913_;
  wire _0914_;
  wire _0915_;
  wire _0916_;
  wire _0917_;
  wire _0918_;
  wire _0919_;
  wire _0920_;
  wire _0921_;
  wire _0922_;
  wire _0923_;
  wire _0924_;
  wire _0925_;
  wire _0926_;
  wire _0927_;
  (* src = "cla_64bit.v:13" *)
  wire [15:0] G;
  (* src = "cla_64bit.v:13" *)
  (* unused_bits = "0" *)
  wire [15:0] P;
  (* src = "cla_64bit.v:4" *)
  input clock;
  (* src = "cla_64bit.v:12" *)
  wire [62:0] cout;
  (* src = "cla_64bit.v:6" *)
  output crout;
  (* src = "cla_64bit.v:11" *)
  wire [63:0] in1;
  (* src = "cla_64bit.v:11" *)
  wire [63:0] in2;
  (* src = "cla_64bit.v:3" *)
  input [63:0] op1;
  (* src = "cla_64bit.v:3" *)
  input [63:0] op2;
  (* src = "cla_64bit.v:9" *)
  wire [63:0] out1;
  (* src = "cla_64bit.v:10" *)
  wire out2;
  (* src = "cla_64bit.v:9" *)
  wire [63:0] p;
  (* src = "cla_64bit.v:5" *)
  input reset;
  (* src = "cla_64bit.v:7" *)
  output [63:0] sum;
  INV_X1 _0928_ (
    .A(_0541_),
    .ZN(_0482_)
  );
  INV_X1 _0929_ (
    .A(_0267_),
    .ZN(_0497_)
  );
  INV_X1 _0930_ (
    .A(_0269_),
    .ZN(_0498_)
  );
  INV_X1 _0931_ (
    .A(_0271_),
    .ZN(_0499_)
  );
  INV_X1 _0932_ (
    .A(_0286_),
    .ZN(_0500_)
  );
  INV_X1 _0933_ (
    .A(_0284_),
    .ZN(_0501_)
  );
  INV_X1 _0934_ (
    .A(_0282_),
    .ZN(_0502_)
  );
  INV_X1 _0935_ (
    .A(_0279_),
    .ZN(_0503_)
  );
  INV_X1 _0936_ (
    .A(_0280_),
    .ZN(_0504_)
  );
  INV_X1 _0937_ (
    .A(_0265_),
    .ZN(_0505_)
  );
  NAND2_X1 _0938_ (
    .A1(_0288_),
    .A2(_0287_),
    .ZN(_0506_)
  );
  AOI21_X1 _0939_ (
    .A(_0266_),
    .B1(_0281_),
    .B2(_0259_),
    .ZN(_0507_)
  );
  INV_X1 _0940_ (
    .A(_0507_),
    .ZN(_0496_)
  );
  OAI21_X1 _0941_ (
    .A(_0497_),
    .B1(_0502_),
    .B2(_0507_),
    .ZN(_0483_)
  );
  AOI21_X1 _0942_ (
    .A(_0268_),
    .B1(_0283_),
    .B2(_0483_),
    .ZN(_0508_)
  );
  INV_X1 _0943_ (
    .A(_0508_),
    .ZN(_0484_)
  );
  OAI21_X1 _0944_ (
    .A(_0498_),
    .B1(_0501_),
    .B2(_0508_),
    .ZN(_0485_)
  );
  AND2_X1 _0945_ (
    .A1(_0285_),
    .A2(_0485_),
    .ZN(_0509_)
  );
  NOR2_X1 _0946_ (
    .A1(_0270_),
    .A2(_0509_),
    .ZN(_0510_)
  );
  INV_X1 _0947_ (
    .A(_0510_),
    .ZN(_0486_)
  );
  OAI21_X1 _0948_ (
    .A(_0499_),
    .B1(_0500_),
    .B2(_0510_),
    .ZN(_0487_)
  );
  AOI21_X1 _0949_ (
    .A(_0274_),
    .B1(_0289_),
    .B2(_0273_),
    .ZN(_0511_)
  );
  NAND2_X1 _0950_ (
    .A1(_0287_),
    .A2(_0286_),
    .ZN(_0512_)
  );
  AND4_X1 _0951_ (
    .A1(_0289_),
    .A2(_0288_),
    .A3(_0287_),
    .A4(_0286_),
    .ZN(_0513_)
  );
  AOI21_X1 _0952_ (
    .A(_0271_),
    .B1(_0286_),
    .B2(_0270_),
    .ZN(_0514_)
  );
  AOI21_X1 _0953_ (
    .A(_0273_),
    .B1(_0288_),
    .B2(_0272_),
    .ZN(_0515_)
  );
  OAI21_X1 _0954_ (
    .A(_0515_),
    .B1(_0514_),
    .B2(_0506_),
    .ZN(_0516_)
  );
  AND2_X1 _0955_ (
    .A1(_0289_),
    .A2(_0516_),
    .ZN(_0517_)
  );
  AOI211_X1 _0956_ (
    .A(_0274_),
    .B(_0517_),
    .C1(_0513_),
    .C2(_0509_),
    .ZN(_0518_)
  );
  INV_X1 _0957_ (
    .A(_0518_),
    .ZN(_0490_)
  );
  AOI21_X1 _0958_ (
    .A(_0260_),
    .B1(_0275_),
    .B2(_0274_),
    .ZN(_0519_)
  );
  NAND2_X1 _0959_ (
    .A1(_0286_),
    .A2(_0285_),
    .ZN(_0520_)
  );
  OR3_X1 _0960_ (
    .A1(_0501_),
    .A2(_0508_),
    .A3(_0520_),
    .ZN(_0521_)
  );
  AOI21_X1 _0961_ (
    .A(_0270_),
    .B1(_0285_),
    .B2(_0269_),
    .ZN(_0522_)
  );
  AOI21_X1 _0962_ (
    .A(_0272_),
    .B1(_0287_),
    .B2(_0271_),
    .ZN(_0523_)
  );
  OAI21_X1 _0963_ (
    .A(_0523_),
    .B1(_0522_),
    .B2(_0512_),
    .ZN(_0524_)
  );
  AOI21_X1 _0964_ (
    .A(_0273_),
    .B1(_0288_),
    .B2(_0524_),
    .ZN(_0525_)
  );
  OAI21_X1 _0965_ (
    .A(_0525_),
    .B1(_0521_),
    .B2(_0506_),
    .ZN(_0489_)
  );
  NAND3_X1 _0966_ (
    .A1(_0289_),
    .A2(_0275_),
    .A3(_0489_),
    .ZN(_0526_)
  );
  NAND2_X1 _0967_ (
    .A1(_0519_),
    .A2(_0526_),
    .ZN(_0491_)
  );
  AOI21_X1 _0968_ (
    .A(_0261_),
    .B1(_0276_),
    .B2(_0260_),
    .ZN(_0527_)
  );
  NAND2_X1 _0969_ (
    .A1(_0275_),
    .A2(_0276_),
    .ZN(_0528_)
  );
  OAI21_X1 _0970_ (
    .A(_0527_),
    .B1(_0528_),
    .B2(_0518_),
    .ZN(_0492_)
  );
  NAND2_X1 _0971_ (
    .A1(_0276_),
    .A2(_0277_),
    .ZN(_0529_)
  );
  NAND3_X1 _0972_ (
    .A1(_0289_),
    .A2(_0288_),
    .A3(_0275_),
    .ZN(_0530_)
  );
  NOR2_X1 _0973_ (
    .A1(_0529_),
    .A2(_0530_),
    .ZN(_0531_)
  );
  NAND2_X1 _0974_ (
    .A1(_0287_),
    .A2(_0531_),
    .ZN(_0532_)
  );
  OR4_X1 _0975_ (
    .A1(_0501_),
    .A2(_0508_),
    .A3(_0520_),
    .A4(_0532_),
    .ZN(_0533_)
  );
  OAI21_X1 _0976_ (
    .A(_0527_),
    .B1(_0528_),
    .B2(_0511_),
    .ZN(_0534_)
  );
  AND2_X1 _0977_ (
    .A1(_0277_),
    .A2(_0534_),
    .ZN(_0535_)
  );
  AOI211_X1 _0978_ (
    .A(_0262_),
    .B(_0535_),
    .C1(_0531_),
    .C2(_0524_),
    .ZN(_0536_)
  );
  NAND2_X1 _0979_ (
    .A1(_0533_),
    .A2(_0536_),
    .ZN(_0493_)
  );
  AOI21_X1 _0980_ (
    .A(_0263_),
    .B1(_0493_),
    .B2(_0278_),
    .ZN(_0537_)
  );
  INV_X1 _0981_ (
    .A(_0537_),
    .ZN(_0494_)
  );
  AOI21_X1 _0982_ (
    .A(_0503_),
    .B1(_0533_),
    .B2(_0536_),
    .ZN(_0538_)
  );
  AOI221_X1 _0983_ (
    .A(_0264_),
    .B1(_0538_),
    .B2(_0278_),
    .C1(_0263_),
    .C2(_0279_),
    .ZN(_0539_)
  );
  INV_X1 _0984_ (
    .A(_0539_),
    .ZN(_0495_)
  );
  OAI21_X1 _0985_ (
    .A(_0505_),
    .B1(_0539_),
    .B2(_0504_),
    .ZN(_0540_)
  );
  OAI21_X1 _0986_ (
    .A(_0523_),
    .B1(_0512_),
    .B2(_0510_),
    .ZN(_0488_)
  );
  INV_X1 _0987_ (
    .A(_0541_),
    .ZN(_0290_)
  );
  INV_X1 _0988_ (
    .A(_0541_),
    .ZN(_0291_)
  );
  INV_X1 _0989_ (
    .A(_0541_),
    .ZN(_0292_)
  );
  INV_X1 _0990_ (
    .A(_0541_),
    .ZN(_0293_)
  );
  INV_X1 _0991_ (
    .A(_0541_),
    .ZN(_0294_)
  );
  INV_X1 _0992_ (
    .A(_0541_),
    .ZN(_0295_)
  );
  INV_X1 _0993_ (
    .A(_0541_),
    .ZN(_0296_)
  );
  INV_X1 _0994_ (
    .A(_0541_),
    .ZN(_0297_)
  );
  INV_X1 _0995_ (
    .A(_0541_),
    .ZN(_0298_)
  );
  INV_X1 _0996_ (
    .A(_0541_),
    .ZN(_0299_)
  );
  INV_X1 _0997_ (
    .A(_0541_),
    .ZN(_0300_)
  );
  INV_X1 _0998_ (
    .A(_0541_),
    .ZN(_0301_)
  );
  INV_X1 _0999_ (
    .A(_0541_),
    .ZN(_0302_)
  );
  INV_X1 _1000_ (
    .A(_0541_),
    .ZN(_0303_)
  );
  INV_X1 _1001_ (
    .A(_0541_),
    .ZN(_0304_)
  );
  INV_X1 _1002_ (
    .A(_0541_),
    .ZN(_0305_)
  );
  INV_X1 _1003_ (
    .A(_0541_),
    .ZN(_0306_)
  );
  INV_X1 _1004_ (
    .A(_0541_),
    .ZN(_0307_)
  );
  INV_X1 _1005_ (
    .A(_0541_),
    .ZN(_0308_)
  );
  INV_X1 _1006_ (
    .A(_0541_),
    .ZN(_0309_)
  );
  INV_X1 _1007_ (
    .A(_0541_),
    .ZN(_0310_)
  );
  INV_X1 _1008_ (
    .A(_0541_),
    .ZN(_0311_)
  );
  INV_X1 _1009_ (
    .A(_0541_),
    .ZN(_0312_)
  );
  INV_X1 _1010_ (
    .A(_0541_),
    .ZN(_0313_)
  );
  INV_X1 _1011_ (
    .A(_0541_),
    .ZN(_0314_)
  );
  INV_X1 _1012_ (
    .A(_0541_),
    .ZN(_0315_)
  );
  INV_X1 _1013_ (
    .A(_0541_),
    .ZN(_0316_)
  );
  INV_X1 _1014_ (
    .A(_0541_),
    .ZN(_0317_)
  );
  INV_X1 _1015_ (
    .A(_0541_),
    .ZN(_0318_)
  );
  INV_X1 _1016_ (
    .A(_0541_),
    .ZN(_0319_)
  );
  INV_X1 _1017_ (
    .A(_0541_),
    .ZN(_0320_)
  );
  INV_X1 _1018_ (
    .A(_0541_),
    .ZN(_0321_)
  );
  INV_X1 _1019_ (
    .A(_0541_),
    .ZN(_0322_)
  );
  INV_X1 _1020_ (
    .A(_0541_),
    .ZN(_0323_)
  );
  INV_X1 _1021_ (
    .A(_0541_),
    .ZN(_0324_)
  );
  INV_X1 _1022_ (
    .A(_0541_),
    .ZN(_0325_)
  );
  INV_X1 _1023_ (
    .A(_0541_),
    .ZN(_0326_)
  );
  INV_X1 _1024_ (
    .A(_0541_),
    .ZN(_0327_)
  );
  INV_X1 _1025_ (
    .A(_0541_),
    .ZN(_0328_)
  );
  INV_X1 _1026_ (
    .A(_0541_),
    .ZN(_0329_)
  );
  INV_X1 _1027_ (
    .A(_0541_),
    .ZN(_0330_)
  );
  INV_X1 _1028_ (
    .A(_0541_),
    .ZN(_0331_)
  );
  INV_X1 _1029_ (
    .A(_0541_),
    .ZN(_0332_)
  );
  INV_X1 _1030_ (
    .A(_0541_),
    .ZN(_0333_)
  );
  INV_X1 _1031_ (
    .A(_0541_),
    .ZN(_0334_)
  );
  INV_X1 _1032_ (
    .A(_0541_),
    .ZN(_0335_)
  );
  INV_X1 _1033_ (
    .A(_0541_),
    .ZN(_0336_)
  );
  INV_X1 _1034_ (
    .A(_0541_),
    .ZN(_0337_)
  );
  INV_X1 _1035_ (
    .A(_0541_),
    .ZN(_0338_)
  );
  INV_X1 _1036_ (
    .A(_0541_),
    .ZN(_0339_)
  );
  INV_X1 _1037_ (
    .A(_0541_),
    .ZN(_0340_)
  );
  INV_X1 _1038_ (
    .A(_0541_),
    .ZN(_0341_)
  );
  INV_X1 _1039_ (
    .A(_0541_),
    .ZN(_0342_)
  );
  INV_X1 _1040_ (
    .A(_0541_),
    .ZN(_0343_)
  );
  INV_X1 _1041_ (
    .A(_0541_),
    .ZN(_0344_)
  );
  INV_X1 _1042_ (
    .A(_0541_),
    .ZN(_0345_)
  );
  INV_X1 _1043_ (
    .A(_0541_),
    .ZN(_0346_)
  );
  INV_X1 _1044_ (
    .A(_0541_),
    .ZN(_0347_)
  );
  INV_X1 _1045_ (
    .A(_0541_),
    .ZN(_0348_)
  );
  INV_X1 _1046_ (
    .A(_0541_),
    .ZN(_0349_)
  );
  INV_X1 _1047_ (
    .A(_0541_),
    .ZN(_0350_)
  );
  INV_X1 _1048_ (
    .A(_0541_),
    .ZN(_0351_)
  );
  INV_X1 _1049_ (
    .A(_0541_),
    .ZN(_0352_)
  );
  INV_X1 _1050_ (
    .A(_0541_),
    .ZN(_0353_)
  );
  INV_X1 _1051_ (
    .A(_0541_),
    .ZN(_0354_)
  );
  INV_X1 _1052_ (
    .A(_0541_),
    .ZN(_0355_)
  );
  INV_X1 _1053_ (
    .A(_0541_),
    .ZN(_0356_)
  );
  INV_X1 _1054_ (
    .A(_0541_),
    .ZN(_0357_)
  );
  INV_X1 _1055_ (
    .A(_0541_),
    .ZN(_0358_)
  );
  INV_X1 _1056_ (
    .A(_0541_),
    .ZN(_0359_)
  );
  INV_X1 _1057_ (
    .A(_0541_),
    .ZN(_0360_)
  );
  INV_X1 _1058_ (
    .A(_0541_),
    .ZN(_0361_)
  );
  INV_X1 _1059_ (
    .A(_0541_),
    .ZN(_0362_)
  );
  INV_X1 _1060_ (
    .A(_0541_),
    .ZN(_0363_)
  );
  INV_X1 _1061_ (
    .A(_0541_),
    .ZN(_0364_)
  );
  INV_X1 _1062_ (
    .A(_0541_),
    .ZN(_0365_)
  );
  INV_X1 _1063_ (
    .A(_0541_),
    .ZN(_0366_)
  );
  INV_X1 _1064_ (
    .A(_0541_),
    .ZN(_0367_)
  );
  INV_X1 _1065_ (
    .A(_0541_),
    .ZN(_0368_)
  );
  INV_X1 _1066_ (
    .A(_0541_),
    .ZN(_0369_)
  );
  INV_X1 _1067_ (
    .A(_0541_),
    .ZN(_0370_)
  );
  INV_X1 _1068_ (
    .A(_0541_),
    .ZN(_0371_)
  );
  INV_X1 _1069_ (
    .A(_0541_),
    .ZN(_0372_)
  );
  INV_X1 _1070_ (
    .A(_0541_),
    .ZN(_0373_)
  );
  INV_X1 _1071_ (
    .A(_0541_),
    .ZN(_0374_)
  );
  INV_X1 _1072_ (
    .A(_0541_),
    .ZN(_0375_)
  );
  INV_X1 _1073_ (
    .A(_0541_),
    .ZN(_0376_)
  );
  INV_X1 _1074_ (
    .A(_0541_),
    .ZN(_0377_)
  );
  INV_X1 _1075_ (
    .A(_0541_),
    .ZN(_0378_)
  );
  INV_X1 _1076_ (
    .A(_0541_),
    .ZN(_0379_)
  );
  INV_X1 _1077_ (
    .A(_0541_),
    .ZN(_0380_)
  );
  INV_X1 _1078_ (
    .A(_0541_),
    .ZN(_0381_)
  );
  INV_X1 _1079_ (
    .A(_0541_),
    .ZN(_0382_)
  );
  INV_X1 _1080_ (
    .A(_0541_),
    .ZN(_0383_)
  );
  INV_X1 _1081_ (
    .A(_0541_),
    .ZN(_0384_)
  );
  INV_X1 _1082_ (
    .A(_0541_),
    .ZN(_0385_)
  );
  INV_X1 _1083_ (
    .A(_0541_),
    .ZN(_0386_)
  );
  INV_X1 _1084_ (
    .A(_0541_),
    .ZN(_0387_)
  );
  INV_X1 _1085_ (
    .A(_0541_),
    .ZN(_0388_)
  );
  INV_X1 _1086_ (
    .A(_0541_),
    .ZN(_0389_)
  );
  INV_X1 _1087_ (
    .A(_0541_),
    .ZN(_0390_)
  );
  INV_X1 _1088_ (
    .A(_0541_),
    .ZN(_0391_)
  );
  INV_X1 _1089_ (
    .A(_0541_),
    .ZN(_0392_)
  );
  INV_X1 _1090_ (
    .A(_0541_),
    .ZN(_0393_)
  );
  INV_X1 _1091_ (
    .A(_0541_),
    .ZN(_0394_)
  );
  INV_X1 _1092_ (
    .A(_0541_),
    .ZN(_0395_)
  );
  INV_X1 _1093_ (
    .A(_0541_),
    .ZN(_0396_)
  );
  INV_X1 _1094_ (
    .A(_0541_),
    .ZN(_0397_)
  );
  INV_X1 _1095_ (
    .A(_0541_),
    .ZN(_0398_)
  );
  INV_X1 _1096_ (
    .A(_0541_),
    .ZN(_0399_)
  );
  INV_X1 _1097_ (
    .A(_0541_),
    .ZN(_0400_)
  );
  INV_X1 _1098_ (
    .A(_0541_),
    .ZN(_0401_)
  );
  INV_X1 _1099_ (
    .A(_0541_),
    .ZN(_0402_)
  );
  INV_X1 _1100_ (
    .A(_0541_),
    .ZN(_0403_)
  );
  INV_X1 _1101_ (
    .A(_0541_),
    .ZN(_0404_)
  );
  INV_X1 _1102_ (
    .A(_0541_),
    .ZN(_0405_)
  );
  INV_X1 _1103_ (
    .A(_0541_),
    .ZN(_0406_)
  );
  INV_X1 _1104_ (
    .A(_0541_),
    .ZN(_0407_)
  );
  INV_X1 _1105_ (
    .A(_0541_),
    .ZN(_0408_)
  );
  INV_X1 _1106_ (
    .A(_0541_),
    .ZN(_0409_)
  );
  INV_X1 _1107_ (
    .A(_0541_),
    .ZN(_0410_)
  );
  INV_X1 _1108_ (
    .A(_0541_),
    .ZN(_0411_)
  );
  INV_X1 _1109_ (
    .A(_0541_),
    .ZN(_0412_)
  );
  INV_X1 _1110_ (
    .A(_0541_),
    .ZN(_0413_)
  );
  INV_X1 _1111_ (
    .A(_0541_),
    .ZN(_0414_)
  );
  INV_X1 _1112_ (
    .A(_0541_),
    .ZN(_0415_)
  );
  INV_X1 _1113_ (
    .A(_0541_),
    .ZN(_0416_)
  );
  INV_X1 _1114_ (
    .A(_0541_),
    .ZN(_0417_)
  );
  INV_X1 _1115_ (
    .A(_0541_),
    .ZN(_0418_)
  );
  INV_X1 _1116_ (
    .A(_0541_),
    .ZN(_0419_)
  );
  INV_X1 _1117_ (
    .A(_0541_),
    .ZN(_0420_)
  );
  INV_X1 _1118_ (
    .A(_0541_),
    .ZN(_0421_)
  );
  INV_X1 _1119_ (
    .A(_0541_),
    .ZN(_0422_)
  );
  INV_X1 _1120_ (
    .A(_0541_),
    .ZN(_0423_)
  );
  INV_X1 _1121_ (
    .A(_0541_),
    .ZN(_0424_)
  );
  INV_X1 _1122_ (
    .A(_0541_),
    .ZN(_0425_)
  );
  INV_X1 _1123_ (
    .A(_0541_),
    .ZN(_0426_)
  );
  INV_X1 _1124_ (
    .A(_0541_),
    .ZN(_0427_)
  );
  INV_X1 _1125_ (
    .A(_0541_),
    .ZN(_0428_)
  );
  INV_X1 _1126_ (
    .A(_0541_),
    .ZN(_0429_)
  );
  INV_X1 _1127_ (
    .A(_0541_),
    .ZN(_0430_)
  );
  INV_X1 _1128_ (
    .A(_0541_),
    .ZN(_0431_)
  );
  INV_X1 _1129_ (
    .A(_0541_),
    .ZN(_0432_)
  );
  INV_X1 _1130_ (
    .A(_0541_),
    .ZN(_0433_)
  );
  INV_X1 _1131_ (
    .A(_0541_),
    .ZN(_0434_)
  );
  INV_X1 _1132_ (
    .A(_0541_),
    .ZN(_0435_)
  );
  INV_X1 _1133_ (
    .A(_0541_),
    .ZN(_0436_)
  );
  INV_X1 _1134_ (
    .A(_0541_),
    .ZN(_0437_)
  );
  INV_X1 _1135_ (
    .A(_0541_),
    .ZN(_0438_)
  );
  INV_X1 _1136_ (
    .A(_0541_),
    .ZN(_0439_)
  );
  INV_X1 _1137_ (
    .A(_0541_),
    .ZN(_0440_)
  );
  INV_X1 _1138_ (
    .A(_0541_),
    .ZN(_0441_)
  );
  INV_X1 _1139_ (
    .A(_0541_),
    .ZN(_0442_)
  );
  INV_X1 _1140_ (
    .A(_0541_),
    .ZN(_0443_)
  );
  INV_X1 _1141_ (
    .A(_0541_),
    .ZN(_0444_)
  );
  INV_X1 _1142_ (
    .A(_0541_),
    .ZN(_0445_)
  );
  INV_X1 _1143_ (
    .A(_0541_),
    .ZN(_0446_)
  );
  INV_X1 _1144_ (
    .A(_0541_),
    .ZN(_0447_)
  );
  INV_X1 _1145_ (
    .A(_0541_),
    .ZN(_0448_)
  );
  INV_X1 _1146_ (
    .A(_0541_),
    .ZN(_0449_)
  );
  INV_X1 _1147_ (
    .A(_0541_),
    .ZN(_0450_)
  );
  INV_X1 _1148_ (
    .A(_0541_),
    .ZN(_0451_)
  );
  INV_X1 _1149_ (
    .A(_0541_),
    .ZN(_0452_)
  );
  INV_X1 _1150_ (
    .A(_0541_),
    .ZN(_0453_)
  );
  INV_X1 _1151_ (
    .A(_0541_),
    .ZN(_0454_)
  );
  INV_X1 _1152_ (
    .A(_0541_),
    .ZN(_0455_)
  );
  INV_X1 _1153_ (
    .A(_0541_),
    .ZN(_0456_)
  );
  INV_X1 _1154_ (
    .A(_0541_),
    .ZN(_0457_)
  );
  INV_X1 _1155_ (
    .A(_0541_),
    .ZN(_0458_)
  );
  INV_X1 _1156_ (
    .A(_0541_),
    .ZN(_0459_)
  );
  INV_X1 _1157_ (
    .A(_0541_),
    .ZN(_0460_)
  );
  INV_X1 _1158_ (
    .A(_0541_),
    .ZN(_0461_)
  );
  INV_X1 _1159_ (
    .A(_0541_),
    .ZN(_0462_)
  );
  INV_X1 _1160_ (
    .A(_0541_),
    .ZN(_0463_)
  );
  INV_X1 _1161_ (
    .A(_0541_),
    .ZN(_0464_)
  );
  INV_X1 _1162_ (
    .A(_0541_),
    .ZN(_0465_)
  );
  INV_X1 _1163_ (
    .A(_0541_),
    .ZN(_0466_)
  );
  INV_X1 _1164_ (
    .A(_0541_),
    .ZN(_0467_)
  );
  INV_X1 _1165_ (
    .A(_0541_),
    .ZN(_0468_)
  );
  INV_X1 _1166_ (
    .A(_0541_),
    .ZN(_0469_)
  );
  INV_X1 _1167_ (
    .A(_0541_),
    .ZN(_0470_)
  );
  INV_X1 _1168_ (
    .A(_0541_),
    .ZN(_0471_)
  );
  INV_X1 _1169_ (
    .A(_0541_),
    .ZN(_0472_)
  );
  INV_X1 _1170_ (
    .A(_0541_),
    .ZN(_0473_)
  );
  INV_X1 _1171_ (
    .A(_0541_),
    .ZN(_0474_)
  );
  INV_X1 _1172_ (
    .A(_0541_),
    .ZN(_0475_)
  );
  INV_X1 _1173_ (
    .A(_0541_),
    .ZN(_0476_)
  );
  INV_X1 _1174_ (
    .A(_0541_),
    .ZN(_0477_)
  );
  INV_X1 _1175_ (
    .A(_0541_),
    .ZN(_0478_)
  );
  INV_X1 _1176_ (
    .A(_0541_),
    .ZN(_0479_)
  );
  INV_X1 _1177_ (
    .A(_0541_),
    .ZN(_0480_)
  );
  INV_X1 _1178_ (
    .A(_0541_),
    .ZN(_0481_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1179_ (
    .CK(clock),
    .D(op1[0]),
    .Q(in1[0]),
    .QN(_0542_),
    .RN(_0735_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1180_ (
    .CK(clock),
    .D(op1[1]),
    .Q(in1[1]),
    .QN(_0543_),
    .RN(_0736_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1181_ (
    .CK(clock),
    .D(op1[2]),
    .Q(in1[2]),
    .QN(_0544_),
    .RN(_0737_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1182_ (
    .CK(clock),
    .D(op1[3]),
    .Q(in1[3]),
    .QN(_0545_),
    .RN(_0738_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1183_ (
    .CK(clock),
    .D(op1[4]),
    .Q(in1[4]),
    .QN(_0546_),
    .RN(_0739_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1184_ (
    .CK(clock),
    .D(op1[5]),
    .Q(in1[5]),
    .QN(_0547_),
    .RN(_0740_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1185_ (
    .CK(clock),
    .D(op1[6]),
    .Q(in1[6]),
    .QN(_0548_),
    .RN(_0741_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1186_ (
    .CK(clock),
    .D(op1[7]),
    .Q(in1[7]),
    .QN(_0549_),
    .RN(_0742_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1187_ (
    .CK(clock),
    .D(op1[8]),
    .Q(in1[8]),
    .QN(_0550_),
    .RN(_0743_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1188_ (
    .CK(clock),
    .D(op1[9]),
    .Q(in1[9]),
    .QN(_0551_),
    .RN(_0744_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1189_ (
    .CK(clock),
    .D(op1[10]),
    .Q(in1[10]),
    .QN(_0552_),
    .RN(_0745_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1190_ (
    .CK(clock),
    .D(op1[11]),
    .Q(in1[11]),
    .QN(_0553_),
    .RN(_0746_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1191_ (
    .CK(clock),
    .D(op1[12]),
    .Q(in1[12]),
    .QN(_0554_),
    .RN(_0747_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1192_ (
    .CK(clock),
    .D(op1[13]),
    .Q(in1[13]),
    .QN(_0555_),
    .RN(_0748_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1193_ (
    .CK(clock),
    .D(op1[14]),
    .Q(in1[14]),
    .QN(_0556_),
    .RN(_0749_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1194_ (
    .CK(clock),
    .D(op1[15]),
    .Q(in1[15]),
    .QN(_0557_),
    .RN(_0750_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1195_ (
    .CK(clock),
    .D(op1[16]),
    .Q(in1[16]),
    .QN(_0558_),
    .RN(_0751_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1196_ (
    .CK(clock),
    .D(op1[17]),
    .Q(in1[17]),
    .QN(_0559_),
    .RN(_0752_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1197_ (
    .CK(clock),
    .D(op1[18]),
    .Q(in1[18]),
    .QN(_0560_),
    .RN(_0753_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1198_ (
    .CK(clock),
    .D(op1[19]),
    .Q(in1[19]),
    .QN(_0561_),
    .RN(_0754_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1199_ (
    .CK(clock),
    .D(op1[20]),
    .Q(in1[20]),
    .QN(_0562_),
    .RN(_0755_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1200_ (
    .CK(clock),
    .D(op1[21]),
    .Q(in1[21]),
    .QN(_0563_),
    .RN(_0756_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1201_ (
    .CK(clock),
    .D(op1[22]),
    .Q(in1[22]),
    .QN(_0564_),
    .RN(_0757_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1202_ (
    .CK(clock),
    .D(op1[23]),
    .Q(in1[23]),
    .QN(_0565_),
    .RN(_0758_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1203_ (
    .CK(clock),
    .D(op1[24]),
    .Q(in1[24]),
    .QN(_0566_),
    .RN(_0759_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1204_ (
    .CK(clock),
    .D(op1[25]),
    .Q(in1[25]),
    .QN(_0567_),
    .RN(_0760_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1205_ (
    .CK(clock),
    .D(op1[26]),
    .Q(in1[26]),
    .QN(_0568_),
    .RN(_0761_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1206_ (
    .CK(clock),
    .D(op1[27]),
    .Q(in1[27]),
    .QN(_0569_),
    .RN(_0762_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1207_ (
    .CK(clock),
    .D(op1[28]),
    .Q(in1[28]),
    .QN(_0570_),
    .RN(_0763_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1208_ (
    .CK(clock),
    .D(op1[29]),
    .Q(in1[29]),
    .QN(_0571_),
    .RN(_0764_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1209_ (
    .CK(clock),
    .D(op1[30]),
    .Q(in1[30]),
    .QN(_0572_),
    .RN(_0765_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1210_ (
    .CK(clock),
    .D(op1[31]),
    .Q(in1[31]),
    .QN(_0573_),
    .RN(_0766_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1211_ (
    .CK(clock),
    .D(op1[32]),
    .Q(in1[32]),
    .QN(_0574_),
    .RN(_0767_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1212_ (
    .CK(clock),
    .D(op1[33]),
    .Q(in1[33]),
    .QN(_0575_),
    .RN(_0768_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1213_ (
    .CK(clock),
    .D(op1[34]),
    .Q(in1[34]),
    .QN(_0576_),
    .RN(_0769_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1214_ (
    .CK(clock),
    .D(op1[35]),
    .Q(in1[35]),
    .QN(_0577_),
    .RN(_0770_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1215_ (
    .CK(clock),
    .D(op1[36]),
    .Q(in1[36]),
    .QN(_0578_),
    .RN(_0771_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1216_ (
    .CK(clock),
    .D(op1[37]),
    .Q(in1[37]),
    .QN(_0579_),
    .RN(_0772_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1217_ (
    .CK(clock),
    .D(op1[38]),
    .Q(in1[38]),
    .QN(_0580_),
    .RN(_0773_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1218_ (
    .CK(clock),
    .D(op1[39]),
    .Q(in1[39]),
    .QN(_0581_),
    .RN(_0774_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1219_ (
    .CK(clock),
    .D(op1[40]),
    .Q(in1[40]),
    .QN(_0582_),
    .RN(_0775_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1220_ (
    .CK(clock),
    .D(op1[41]),
    .Q(in1[41]),
    .QN(_0583_),
    .RN(_0776_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1221_ (
    .CK(clock),
    .D(op1[42]),
    .Q(in1[42]),
    .QN(_0584_),
    .RN(_0777_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1222_ (
    .CK(clock),
    .D(op1[43]),
    .Q(in1[43]),
    .QN(_0585_),
    .RN(_0778_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1223_ (
    .CK(clock),
    .D(op1[44]),
    .Q(in1[44]),
    .QN(_0586_),
    .RN(_0779_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1224_ (
    .CK(clock),
    .D(op1[45]),
    .Q(in1[45]),
    .QN(_0587_),
    .RN(_0780_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1225_ (
    .CK(clock),
    .D(op1[46]),
    .Q(in1[46]),
    .QN(_0588_),
    .RN(_0781_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1226_ (
    .CK(clock),
    .D(op1[47]),
    .Q(in1[47]),
    .QN(_0589_),
    .RN(_0782_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1227_ (
    .CK(clock),
    .D(op1[48]),
    .Q(in1[48]),
    .QN(_0590_),
    .RN(_0783_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1228_ (
    .CK(clock),
    .D(op1[49]),
    .Q(in1[49]),
    .QN(_0591_),
    .RN(_0784_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1229_ (
    .CK(clock),
    .D(op1[50]),
    .Q(in1[50]),
    .QN(_0592_),
    .RN(_0785_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1230_ (
    .CK(clock),
    .D(op1[51]),
    .Q(in1[51]),
    .QN(_0593_),
    .RN(_0786_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1231_ (
    .CK(clock),
    .D(op1[52]),
    .Q(in1[52]),
    .QN(_0594_),
    .RN(_0787_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1232_ (
    .CK(clock),
    .D(op1[53]),
    .Q(in1[53]),
    .QN(_0595_),
    .RN(_0788_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1233_ (
    .CK(clock),
    .D(op1[54]),
    .Q(in1[54]),
    .QN(_0596_),
    .RN(_0789_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1234_ (
    .CK(clock),
    .D(op1[55]),
    .Q(in1[55]),
    .QN(_0597_),
    .RN(_0790_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1235_ (
    .CK(clock),
    .D(op1[56]),
    .Q(in1[56]),
    .QN(_0598_),
    .RN(_0791_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1236_ (
    .CK(clock),
    .D(op1[57]),
    .Q(in1[57]),
    .QN(_0599_),
    .RN(_0792_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1237_ (
    .CK(clock),
    .D(op1[58]),
    .Q(in1[58]),
    .QN(_0600_),
    .RN(_0793_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1238_ (
    .CK(clock),
    .D(op1[59]),
    .Q(in1[59]),
    .QN(_0601_),
    .RN(_0794_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1239_ (
    .CK(clock),
    .D(op1[60]),
    .Q(in1[60]),
    .QN(_0602_),
    .RN(_0795_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1240_ (
    .CK(clock),
    .D(op1[61]),
    .Q(in1[61]),
    .QN(_0603_),
    .RN(_0796_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1241_ (
    .CK(clock),
    .D(op1[62]),
    .Q(in1[62]),
    .QN(_0604_),
    .RN(_0797_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1242_ (
    .CK(clock),
    .D(op1[63]),
    .Q(in1[63]),
    .QN(_0605_),
    .RN(_0798_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1243_ (
    .CK(clock),
    .D(op2[0]),
    .Q(in2[0]),
    .QN(_0606_),
    .RN(_0799_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1244_ (
    .CK(clock),
    .D(op2[1]),
    .Q(in2[1]),
    .QN(_0607_),
    .RN(_0800_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1245_ (
    .CK(clock),
    .D(op2[2]),
    .Q(in2[2]),
    .QN(_0608_),
    .RN(_0801_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1246_ (
    .CK(clock),
    .D(op2[3]),
    .Q(in2[3]),
    .QN(_0609_),
    .RN(_0802_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1247_ (
    .CK(clock),
    .D(op2[4]),
    .Q(in2[4]),
    .QN(_0610_),
    .RN(_0803_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1248_ (
    .CK(clock),
    .D(op2[5]),
    .Q(in2[5]),
    .QN(_0611_),
    .RN(_0804_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1249_ (
    .CK(clock),
    .D(op2[6]),
    .Q(in2[6]),
    .QN(_0612_),
    .RN(_0805_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1250_ (
    .CK(clock),
    .D(op2[7]),
    .Q(in2[7]),
    .QN(_0613_),
    .RN(_0806_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1251_ (
    .CK(clock),
    .D(op2[8]),
    .Q(in2[8]),
    .QN(_0614_),
    .RN(_0807_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1252_ (
    .CK(clock),
    .D(op2[9]),
    .Q(in2[9]),
    .QN(_0615_),
    .RN(_0808_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1253_ (
    .CK(clock),
    .D(op2[10]),
    .Q(in2[10]),
    .QN(_0616_),
    .RN(_0809_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1254_ (
    .CK(clock),
    .D(op2[11]),
    .Q(in2[11]),
    .QN(_0617_),
    .RN(_0810_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1255_ (
    .CK(clock),
    .D(op2[12]),
    .Q(in2[12]),
    .QN(_0618_),
    .RN(_0811_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1256_ (
    .CK(clock),
    .D(op2[13]),
    .Q(in2[13]),
    .QN(_0619_),
    .RN(_0812_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1257_ (
    .CK(clock),
    .D(op2[14]),
    .Q(in2[14]),
    .QN(_0620_),
    .RN(_0813_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1258_ (
    .CK(clock),
    .D(op2[15]),
    .Q(in2[15]),
    .QN(_0621_),
    .RN(_0814_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1259_ (
    .CK(clock),
    .D(op2[16]),
    .Q(in2[16]),
    .QN(_0622_),
    .RN(_0815_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1260_ (
    .CK(clock),
    .D(op2[17]),
    .Q(in2[17]),
    .QN(_0623_),
    .RN(_0816_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1261_ (
    .CK(clock),
    .D(op2[18]),
    .Q(in2[18]),
    .QN(_0624_),
    .RN(_0817_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1262_ (
    .CK(clock),
    .D(op2[19]),
    .Q(in2[19]),
    .QN(_0625_),
    .RN(_0818_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1263_ (
    .CK(clock),
    .D(op2[20]),
    .Q(in2[20]),
    .QN(_0626_),
    .RN(_0819_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1264_ (
    .CK(clock),
    .D(op2[21]),
    .Q(in2[21]),
    .QN(_0627_),
    .RN(_0820_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1265_ (
    .CK(clock),
    .D(op2[22]),
    .Q(in2[22]),
    .QN(_0628_),
    .RN(_0821_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1266_ (
    .CK(clock),
    .D(op2[23]),
    .Q(in2[23]),
    .QN(_0629_),
    .RN(_0822_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1267_ (
    .CK(clock),
    .D(op2[24]),
    .Q(in2[24]),
    .QN(_0630_),
    .RN(_0823_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1268_ (
    .CK(clock),
    .D(op2[25]),
    .Q(in2[25]),
    .QN(_0631_),
    .RN(_0824_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1269_ (
    .CK(clock),
    .D(op2[26]),
    .Q(in2[26]),
    .QN(_0632_),
    .RN(_0825_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1270_ (
    .CK(clock),
    .D(op2[27]),
    .Q(in2[27]),
    .QN(_0633_),
    .RN(_0826_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1271_ (
    .CK(clock),
    .D(op2[28]),
    .Q(in2[28]),
    .QN(_0634_),
    .RN(_0827_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1272_ (
    .CK(clock),
    .D(op2[29]),
    .Q(in2[29]),
    .QN(_0635_),
    .RN(_0828_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1273_ (
    .CK(clock),
    .D(op2[30]),
    .Q(in2[30]),
    .QN(_0636_),
    .RN(_0829_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1274_ (
    .CK(clock),
    .D(op2[31]),
    .Q(in2[31]),
    .QN(_0637_),
    .RN(_0830_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1275_ (
    .CK(clock),
    .D(op2[32]),
    .Q(in2[32]),
    .QN(_0638_),
    .RN(_0831_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1276_ (
    .CK(clock),
    .D(op2[33]),
    .Q(in2[33]),
    .QN(_0639_),
    .RN(_0832_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1277_ (
    .CK(clock),
    .D(op2[34]),
    .Q(in2[34]),
    .QN(_0640_),
    .RN(_0833_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1278_ (
    .CK(clock),
    .D(op2[35]),
    .Q(in2[35]),
    .QN(_0641_),
    .RN(_0834_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1279_ (
    .CK(clock),
    .D(op2[36]),
    .Q(in2[36]),
    .QN(_0642_),
    .RN(_0835_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1280_ (
    .CK(clock),
    .D(op2[37]),
    .Q(in2[37]),
    .QN(_0643_),
    .RN(_0836_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1281_ (
    .CK(clock),
    .D(op2[38]),
    .Q(in2[38]),
    .QN(_0644_),
    .RN(_0837_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1282_ (
    .CK(clock),
    .D(op2[39]),
    .Q(in2[39]),
    .QN(_0645_),
    .RN(_0838_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1283_ (
    .CK(clock),
    .D(op2[40]),
    .Q(in2[40]),
    .QN(_0646_),
    .RN(_0839_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1284_ (
    .CK(clock),
    .D(op2[41]),
    .Q(in2[41]),
    .QN(_0647_),
    .RN(_0840_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1285_ (
    .CK(clock),
    .D(op2[42]),
    .Q(in2[42]),
    .QN(_0648_),
    .RN(_0841_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1286_ (
    .CK(clock),
    .D(op2[43]),
    .Q(in2[43]),
    .QN(_0649_),
    .RN(_0842_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1287_ (
    .CK(clock),
    .D(op2[44]),
    .Q(in2[44]),
    .QN(_0650_),
    .RN(_0843_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1288_ (
    .CK(clock),
    .D(op2[45]),
    .Q(in2[45]),
    .QN(_0651_),
    .RN(_0844_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1289_ (
    .CK(clock),
    .D(op2[46]),
    .Q(in2[46]),
    .QN(_0652_),
    .RN(_0845_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1290_ (
    .CK(clock),
    .D(op2[47]),
    .Q(in2[47]),
    .QN(_0653_),
    .RN(_0846_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1291_ (
    .CK(clock),
    .D(op2[48]),
    .Q(in2[48]),
    .QN(_0654_),
    .RN(_0847_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1292_ (
    .CK(clock),
    .D(op2[49]),
    .Q(in2[49]),
    .QN(_0655_),
    .RN(_0848_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1293_ (
    .CK(clock),
    .D(op2[50]),
    .Q(in2[50]),
    .QN(_0656_),
    .RN(_0849_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1294_ (
    .CK(clock),
    .D(op2[51]),
    .Q(in2[51]),
    .QN(_0657_),
    .RN(_0850_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1295_ (
    .CK(clock),
    .D(op2[52]),
    .Q(in2[52]),
    .QN(_0658_),
    .RN(_0851_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1296_ (
    .CK(clock),
    .D(op2[53]),
    .Q(in2[53]),
    .QN(_0659_),
    .RN(_0852_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1297_ (
    .CK(clock),
    .D(op2[54]),
    .Q(in2[54]),
    .QN(_0660_),
    .RN(_0853_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1298_ (
    .CK(clock),
    .D(op2[55]),
    .Q(in2[55]),
    .QN(_0661_),
    .RN(_0854_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1299_ (
    .CK(clock),
    .D(op2[56]),
    .Q(in2[56]),
    .QN(_0662_),
    .RN(_0855_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1300_ (
    .CK(clock),
    .D(op2[57]),
    .Q(in2[57]),
    .QN(_0663_),
    .RN(_0856_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1301_ (
    .CK(clock),
    .D(op2[58]),
    .Q(in2[58]),
    .QN(_0664_),
    .RN(_0857_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1302_ (
    .CK(clock),
    .D(op2[59]),
    .Q(in2[59]),
    .QN(_0665_),
    .RN(_0858_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1303_ (
    .CK(clock),
    .D(op2[60]),
    .Q(in2[60]),
    .QN(_0666_),
    .RN(_0859_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1304_ (
    .CK(clock),
    .D(op2[61]),
    .Q(in2[61]),
    .QN(_0667_),
    .RN(_0860_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1305_ (
    .CK(clock),
    .D(op2[62]),
    .Q(in2[62]),
    .QN(_0668_),
    .RN(_0861_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1306_ (
    .CK(clock),
    .D(op2[63]),
    .Q(in2[63]),
    .QN(_0669_),
    .RN(_0862_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1307_ (
    .CK(clock),
    .D(out1[0]),
    .Q(sum[0]),
    .QN(_0670_),
    .RN(_0863_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1308_ (
    .CK(clock),
    .D(out1[1]),
    .Q(sum[1]),
    .QN(_0671_),
    .RN(_0864_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1309_ (
    .CK(clock),
    .D(out1[2]),
    .Q(sum[2]),
    .QN(_0672_),
    .RN(_0865_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1310_ (
    .CK(clock),
    .D(out1[3]),
    .Q(sum[3]),
    .QN(_0673_),
    .RN(_0866_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1311_ (
    .CK(clock),
    .D(out1[4]),
    .Q(sum[4]),
    .QN(_0674_),
    .RN(_0867_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1312_ (
    .CK(clock),
    .D(out1[5]),
    .Q(sum[5]),
    .QN(_0675_),
    .RN(_0868_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1313_ (
    .CK(clock),
    .D(out1[6]),
    .Q(sum[6]),
    .QN(_0676_),
    .RN(_0869_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1314_ (
    .CK(clock),
    .D(out1[7]),
    .Q(sum[7]),
    .QN(_0677_),
    .RN(_0870_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1315_ (
    .CK(clock),
    .D(out1[8]),
    .Q(sum[8]),
    .QN(_0678_),
    .RN(_0871_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1316_ (
    .CK(clock),
    .D(out1[9]),
    .Q(sum[9]),
    .QN(_0679_),
    .RN(_0872_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1317_ (
    .CK(clock),
    .D(out1[10]),
    .Q(sum[10]),
    .QN(_0680_),
    .RN(_0873_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1318_ (
    .CK(clock),
    .D(out1[11]),
    .Q(sum[11]),
    .QN(_0681_),
    .RN(_0874_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1319_ (
    .CK(clock),
    .D(out1[12]),
    .Q(sum[12]),
    .QN(_0682_),
    .RN(_0875_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1320_ (
    .CK(clock),
    .D(out1[13]),
    .Q(sum[13]),
    .QN(_0683_),
    .RN(_0876_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1321_ (
    .CK(clock),
    .D(out1[14]),
    .Q(sum[14]),
    .QN(_0684_),
    .RN(_0877_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1322_ (
    .CK(clock),
    .D(out1[15]),
    .Q(sum[15]),
    .QN(_0685_),
    .RN(_0878_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1323_ (
    .CK(clock),
    .D(out1[16]),
    .Q(sum[16]),
    .QN(_0686_),
    .RN(_0879_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1324_ (
    .CK(clock),
    .D(out1[17]),
    .Q(sum[17]),
    .QN(_0687_),
    .RN(_0880_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1325_ (
    .CK(clock),
    .D(out1[18]),
    .Q(sum[18]),
    .QN(_0688_),
    .RN(_0881_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1326_ (
    .CK(clock),
    .D(out1[19]),
    .Q(sum[19]),
    .QN(_0689_),
    .RN(_0882_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1327_ (
    .CK(clock),
    .D(out1[20]),
    .Q(sum[20]),
    .QN(_0690_),
    .RN(_0883_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1328_ (
    .CK(clock),
    .D(out1[21]),
    .Q(sum[21]),
    .QN(_0691_),
    .RN(_0884_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1329_ (
    .CK(clock),
    .D(out1[22]),
    .Q(sum[22]),
    .QN(_0692_),
    .RN(_0885_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1330_ (
    .CK(clock),
    .D(out1[23]),
    .Q(sum[23]),
    .QN(_0693_),
    .RN(_0886_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1331_ (
    .CK(clock),
    .D(out1[24]),
    .Q(sum[24]),
    .QN(_0694_),
    .RN(_0887_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1332_ (
    .CK(clock),
    .D(out1[25]),
    .Q(sum[25]),
    .QN(_0695_),
    .RN(_0888_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1333_ (
    .CK(clock),
    .D(out1[26]),
    .Q(sum[26]),
    .QN(_0696_),
    .RN(_0889_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1334_ (
    .CK(clock),
    .D(out1[27]),
    .Q(sum[27]),
    .QN(_0697_),
    .RN(_0890_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1335_ (
    .CK(clock),
    .D(out1[28]),
    .Q(sum[28]),
    .QN(_0698_),
    .RN(_0891_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1336_ (
    .CK(clock),
    .D(out1[29]),
    .Q(sum[29]),
    .QN(_0699_),
    .RN(_0892_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1337_ (
    .CK(clock),
    .D(out1[30]),
    .Q(sum[30]),
    .QN(_0700_),
    .RN(_0893_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1338_ (
    .CK(clock),
    .D(out1[31]),
    .Q(sum[31]),
    .QN(_0701_),
    .RN(_0894_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1339_ (
    .CK(clock),
    .D(out1[32]),
    .Q(sum[32]),
    .QN(_0702_),
    .RN(_0895_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1340_ (
    .CK(clock),
    .D(out1[33]),
    .Q(sum[33]),
    .QN(_0703_),
    .RN(_0896_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1341_ (
    .CK(clock),
    .D(out1[34]),
    .Q(sum[34]),
    .QN(_0704_),
    .RN(_0897_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1342_ (
    .CK(clock),
    .D(out1[35]),
    .Q(sum[35]),
    .QN(_0705_),
    .RN(_0898_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1343_ (
    .CK(clock),
    .D(out1[36]),
    .Q(sum[36]),
    .QN(_0706_),
    .RN(_0899_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1344_ (
    .CK(clock),
    .D(out1[37]),
    .Q(sum[37]),
    .QN(_0707_),
    .RN(_0900_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1345_ (
    .CK(clock),
    .D(out1[38]),
    .Q(sum[38]),
    .QN(_0708_),
    .RN(_0901_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1346_ (
    .CK(clock),
    .D(out1[39]),
    .Q(sum[39]),
    .QN(_0709_),
    .RN(_0902_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1347_ (
    .CK(clock),
    .D(out1[40]),
    .Q(sum[40]),
    .QN(_0710_),
    .RN(_0903_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1348_ (
    .CK(clock),
    .D(out1[41]),
    .Q(sum[41]),
    .QN(_0711_),
    .RN(_0904_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1349_ (
    .CK(clock),
    .D(out1[42]),
    .Q(sum[42]),
    .QN(_0712_),
    .RN(_0905_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1350_ (
    .CK(clock),
    .D(out1[43]),
    .Q(sum[43]),
    .QN(_0713_),
    .RN(_0906_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1351_ (
    .CK(clock),
    .D(out1[44]),
    .Q(sum[44]),
    .QN(_0714_),
    .RN(_0907_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1352_ (
    .CK(clock),
    .D(out1[45]),
    .Q(sum[45]),
    .QN(_0715_),
    .RN(_0908_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1353_ (
    .CK(clock),
    .D(out1[46]),
    .Q(sum[46]),
    .QN(_0716_),
    .RN(_0909_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1354_ (
    .CK(clock),
    .D(out1[47]),
    .Q(sum[47]),
    .QN(_0717_),
    .RN(_0910_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1355_ (
    .CK(clock),
    .D(out1[48]),
    .Q(sum[48]),
    .QN(_0718_),
    .RN(_0911_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1356_ (
    .CK(clock),
    .D(out1[49]),
    .Q(sum[49]),
    .QN(_0719_),
    .RN(_0912_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1357_ (
    .CK(clock),
    .D(out1[50]),
    .Q(sum[50]),
    .QN(_0720_),
    .RN(_0913_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1358_ (
    .CK(clock),
    .D(out1[51]),
    .Q(sum[51]),
    .QN(_0721_),
    .RN(_0914_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1359_ (
    .CK(clock),
    .D(out1[52]),
    .Q(sum[52]),
    .QN(_0722_),
    .RN(_0915_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1360_ (
    .CK(clock),
    .D(out1[53]),
    .Q(sum[53]),
    .QN(_0723_),
    .RN(_0916_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1361_ (
    .CK(clock),
    .D(out1[54]),
    .Q(sum[54]),
    .QN(_0724_),
    .RN(_0917_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1362_ (
    .CK(clock),
    .D(out1[55]),
    .Q(sum[55]),
    .QN(_0725_),
    .RN(_0918_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1363_ (
    .CK(clock),
    .D(out1[56]),
    .Q(sum[56]),
    .QN(_0726_),
    .RN(_0919_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1364_ (
    .CK(clock),
    .D(out1[57]),
    .Q(sum[57]),
    .QN(_0727_),
    .RN(_0920_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1365_ (
    .CK(clock),
    .D(out1[58]),
    .Q(sum[58]),
    .QN(_0728_),
    .RN(_0921_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1366_ (
    .CK(clock),
    .D(out1[59]),
    .Q(sum[59]),
    .QN(_0729_),
    .RN(_0922_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1367_ (
    .CK(clock),
    .D(out1[60]),
    .Q(sum[60]),
    .QN(_0730_),
    .RN(_0923_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1368_ (
    .CK(clock),
    .D(out1[61]),
    .Q(sum[61]),
    .QN(_0731_),
    .RN(_0924_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1369_ (
    .CK(clock),
    .D(out1[62]),
    .Q(sum[62]),
    .QN(_0732_),
    .RN(_0925_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1370_ (
    .CK(clock),
    .D(out1[63]),
    .Q(sum[63]),
    .QN(_0733_),
    .RN(_0926_)
  );
  (* src = "cla_64bit.v:15" *)
  DFFR_X1 _1371_ (
    .CK(clock),
    .D(out2),
    .Q(crout),
    .QN(_0734_),
    .RN(_0927_)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:38" *)
  cla_gp gp0 (
    .G(G[0]),
    .P(P[0]),
    .a(in1[3:0]),
    .b(in2[3:0]),
    .cout(cout[2:0]),
    .p(p[3:0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:39" *)
  cla_gpc gp1 (
    .G(G[1]),
    .P(P[1]),
    .a(in1[7:4]),
    .b(in2[7:4]),
    .cin(G[0]),
    .cout(cout[6:4]),
    .p(p[7:4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:48" *)
  cla_gpc gp10 (
    .G(G[10]),
    .P(P[10]),
    .a(in1[43:40]),
    .b(in2[43:40]),
    .cin(cout[39]),
    .cout(cout[42:40]),
    .p(p[43:40])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:49" *)
  cla_gpc gp11 (
    .G(G[11]),
    .P(P[11]),
    .a(in1[47:44]),
    .b(in2[47:44]),
    .cin(cout[43]),
    .cout(cout[46:44]),
    .p(p[47:44])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:50" *)
  cla_gpc gp12 (
    .G(G[12]),
    .P(P[12]),
    .a(in1[51:48]),
    .b(in2[51:48]),
    .cin(cout[47]),
    .cout(cout[50:48]),
    .p(p[51:48])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:51" *)
  cla_gpc gp13 (
    .G(G[13]),
    .P(P[13]),
    .a(in1[55:52]),
    .b(in2[55:52]),
    .cin(cout[51]),
    .cout(cout[54:52]),
    .p(p[55:52])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:52" *)
  cla_gpc gp14 (
    .G(G[14]),
    .P(P[14]),
    .a(in1[59:56]),
    .b(in2[59:56]),
    .cin(cout[55]),
    .cout(cout[58:56]),
    .p(p[59:56])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:53" *)
  cla_gpc gp15 (
    .G(G[15]),
    .P(P[15]),
    .a(in1[63:60]),
    .b(in2[63:60]),
    .cin(cout[59]),
    .cout(cout[62:60]),
    .p(p[63:60])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:40" *)
  cla_gpc gp2 (
    .G(G[2]),
    .P(P[2]),
    .a(in1[11:8]),
    .b(in2[11:8]),
    .cin(cout[7]),
    .cout(cout[10:8]),
    .p(p[11:8])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:41" *)
  cla_gpc gp3 (
    .G(G[3]),
    .P(P[3]),
    .a(in1[15:12]),
    .b(in2[15:12]),
    .cin(cout[11]),
    .cout(cout[14:12]),
    .p(p[15:12])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:42" *)
  cla_gpc gp4 (
    .G(G[4]),
    .P(P[4]),
    .a(in1[19:16]),
    .b(in2[19:16]),
    .cin(cout[15]),
    .cout(cout[18:16]),
    .p(p[19:16])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:43" *)
  cla_gpc gp5 (
    .G(G[5]),
    .P(P[5]),
    .a(in1[23:20]),
    .b(in2[23:20]),
    .cin(cout[19]),
    .cout(cout[22:20]),
    .p(p[23:20])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:44" *)
  cla_gpc gp6 (
    .G(G[6]),
    .P(P[6]),
    .a(in1[27:24]),
    .b(in2[27:24]),
    .cin(cout[23]),
    .cout(cout[26:24]),
    .p(p[27:24])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:45" *)
  cla_gpc gp7 (
    .G(G[7]),
    .P(P[7]),
    .a(in1[31:28]),
    .b(in2[31:28]),
    .cin(cout[27]),
    .cout(cout[30:28]),
    .p(p[31:28])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:46" *)
  cla_gpc gp8 (
    .G(G[8]),
    .P(P[8]),
    .a(in1[35:32]),
    .b(in2[35:32]),
    .cin(cout[31]),
    .cout(cout[34:32]),
    .p(p[35:32])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:47" *)
  cla_gpc gp9 (
    .G(G[9]),
    .P(P[9]),
    .a(in1[39:36]),
    .b(in2[39:36]),
    .cin(cout[35]),
    .cout(cout[38:36]),
    .p(p[39:36])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[0]  (
    .a(p[0]),
    .b(1'h0),
    .sum(out1[0])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[10]  (
    .a(p[10]),
    .b(cout[9]),
    .sum(out1[10])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[11]  (
    .a(p[11]),
    .b(cout[10]),
    .sum(out1[11])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[12]  (
    .a(p[12]),
    .b(cout[11]),
    .sum(out1[12])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[13]  (
    .a(p[13]),
    .b(cout[12]),
    .sum(out1[13])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[14]  (
    .a(p[14]),
    .b(cout[13]),
    .sum(out1[14])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[15]  (
    .a(p[15]),
    .b(cout[14]),
    .sum(out1[15])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[16]  (
    .a(p[16]),
    .b(cout[15]),
    .sum(out1[16])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[17]  (
    .a(p[17]),
    .b(cout[16]),
    .sum(out1[17])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[18]  (
    .a(p[18]),
    .b(cout[17]),
    .sum(out1[18])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[19]  (
    .a(p[19]),
    .b(cout[18]),
    .sum(out1[19])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[1]  (
    .a(p[1]),
    .b(cout[0]),
    .sum(out1[1])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[20]  (
    .a(p[20]),
    .b(cout[19]),
    .sum(out1[20])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[21]  (
    .a(p[21]),
    .b(cout[20]),
    .sum(out1[21])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[22]  (
    .a(p[22]),
    .b(cout[21]),
    .sum(out1[22])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[23]  (
    .a(p[23]),
    .b(cout[22]),
    .sum(out1[23])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[24]  (
    .a(p[24]),
    .b(cout[23]),
    .sum(out1[24])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[25]  (
    .a(p[25]),
    .b(cout[24]),
    .sum(out1[25])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[26]  (
    .a(p[26]),
    .b(cout[25]),
    .sum(out1[26])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[27]  (
    .a(p[27]),
    .b(cout[26]),
    .sum(out1[27])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[28]  (
    .a(p[28]),
    .b(cout[27]),
    .sum(out1[28])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[29]  (
    .a(p[29]),
    .b(cout[28]),
    .sum(out1[29])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[2]  (
    .a(p[2]),
    .b(cout[1]),
    .sum(out1[2])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[30]  (
    .a(p[30]),
    .b(cout[29]),
    .sum(out1[30])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[31]  (
    .a(p[31]),
    .b(cout[30]),
    .sum(out1[31])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[32]  (
    .a(p[32]),
    .b(cout[31]),
    .sum(out1[32])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[33]  (
    .a(p[33]),
    .b(cout[32]),
    .sum(out1[33])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[34]  (
    .a(p[34]),
    .b(cout[33]),
    .sum(out1[34])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[35]  (
    .a(p[35]),
    .b(cout[34]),
    .sum(out1[35])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[36]  (
    .a(p[36]),
    .b(cout[35]),
    .sum(out1[36])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[37]  (
    .a(p[37]),
    .b(cout[36]),
    .sum(out1[37])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[38]  (
    .a(p[38]),
    .b(cout[37]),
    .sum(out1[38])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[39]  (
    .a(p[39]),
    .b(cout[38]),
    .sum(out1[39])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[3]  (
    .a(p[3]),
    .b(cout[2]),
    .sum(out1[3])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[40]  (
    .a(p[40]),
    .b(cout[39]),
    .sum(out1[40])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[41]  (
    .a(p[41]),
    .b(cout[40]),
    .sum(out1[41])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[42]  (
    .a(p[42]),
    .b(cout[41]),
    .sum(out1[42])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[43]  (
    .a(p[43]),
    .b(cout[42]),
    .sum(out1[43])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[44]  (
    .a(p[44]),
    .b(cout[43]),
    .sum(out1[44])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[45]  (
    .a(p[45]),
    .b(cout[44]),
    .sum(out1[45])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[46]  (
    .a(p[46]),
    .b(cout[45]),
    .sum(out1[46])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[47]  (
    .a(p[47]),
    .b(cout[46]),
    .sum(out1[47])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[48]  (
    .a(p[48]),
    .b(cout[47]),
    .sum(out1[48])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[49]  (
    .a(p[49]),
    .b(cout[48]),
    .sum(out1[49])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[4]  (
    .a(p[4]),
    .b(G[0]),
    .sum(out1[4])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[50]  (
    .a(p[50]),
    .b(cout[49]),
    .sum(out1[50])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[51]  (
    .a(p[51]),
    .b(cout[50]),
    .sum(out1[51])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[52]  (
    .a(p[52]),
    .b(cout[51]),
    .sum(out1[52])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[53]  (
    .a(p[53]),
    .b(cout[52]),
    .sum(out1[53])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[54]  (
    .a(p[54]),
    .b(cout[53]),
    .sum(out1[54])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[55]  (
    .a(p[55]),
    .b(cout[54]),
    .sum(out1[55])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[56]  (
    .a(p[56]),
    .b(cout[55]),
    .sum(out1[56])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[57]  (
    .a(p[57]),
    .b(cout[56]),
    .sum(out1[57])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[58]  (
    .a(p[58]),
    .b(cout[57]),
    .sum(out1[58])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[59]  (
    .a(p[59]),
    .b(cout[58]),
    .sum(out1[59])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[5]  (
    .a(p[5]),
    .b(cout[4]),
    .sum(out1[5])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[60]  (
    .a(p[60]),
    .b(cout[59]),
    .sum(out1[60])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[61]  (
    .a(p[61]),
    .b(cout[60]),
    .sum(out1[61])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[62]  (
    .a(p[62]),
    .b(cout[61]),
    .sum(out1[62])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[63]  (
    .a(p[63]),
    .b(cout[62]),
    .sum(out1[63])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[6]  (
    .a(p[6]),
    .b(cout[5]),
    .sum(out1[6])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[7]  (
    .a(p[7]),
    .b(cout[6]),
    .sum(out1[7])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[8]  (
    .a(p[8]),
    .b(cout[7]),
    .sum(out1[8])
  );
  (* module_not_derived = 32'd1 *)
  (* src = "cla_64bit.v:79" *)
  cla_sum \su[9]  (
    .a(p[9]),
    .b(cout[8]),
    .sum(out1[9])
  );
  assign cout[3] = G[0];
  assign _0541_ = reset;
  assign _0927_ = _0482_;
  assign _0267_ = G[2];
  assign _0269_ = G[4];
  assign _0271_ = G[6];
  assign _0273_ = G[8];
  assign _0289_ = P[9];
  assign _0274_ = G[9];
  assign _0288_ = P[8];
  assign _0272_ = G[7];
  assign _0287_ = P[7];
  assign _0286_ = P[6];
  assign _0270_ = G[5];
  assign _0285_ = P[5];
  assign _0284_ = P[4];
  assign _0268_ = G[3];
  assign _0283_ = P[3];
  assign _0282_ = P[2];
  assign _0266_ = G[1];
  assign _0281_ = P[1];
  assign cout[39] = _0490_;
  assign _0275_ = P[10];
  assign _0260_ = G[10];
  assign cout[43] = _0491_;
  assign _0276_ = P[11];
  assign _0261_ = G[11];
  assign cout[47] = _0492_;
  assign _0277_ = P[12];
  assign _0262_ = G[12];
  assign cout[51] = _0493_;
  assign _0278_ = P[13];
  assign _0263_ = G[13];
  assign cout[55] = _0494_;
  assign _0279_ = P[14];
  assign _0264_ = G[14];
  assign cout[59] = _0495_;
  assign _0280_ = P[15];
  assign _0265_ = G[15];
  assign out2 = _0540_;
  assign cout[7] = _0496_;
  assign cout[11] = _0483_;
  assign cout[15] = _0484_;
  assign cout[19] = _0485_;
  assign cout[27] = _0487_;
  assign cout[23] = _0486_;
  assign cout[31] = _0488_;
  assign cout[35] = _0489_;
  assign _0259_ = G[0];
  assign _0735_ = _0290_;
  assign _0736_ = _0291_;
  assign _0737_ = _0292_;
  assign _0738_ = _0293_;
  assign _0739_ = _0294_;
  assign _0740_ = _0295_;
  assign _0741_ = _0296_;
  assign _0742_ = _0297_;
  assign _0743_ = _0298_;
  assign _0744_ = _0299_;
  assign _0745_ = _0300_;
  assign _0746_ = _0301_;
  assign _0747_ = _0302_;
  assign _0748_ = _0303_;
  assign _0749_ = _0304_;
  assign _0750_ = _0305_;
  assign _0751_ = _0306_;
  assign _0752_ = _0307_;
  assign _0753_ = _0308_;
  assign _0754_ = _0309_;
  assign _0755_ = _0310_;
  assign _0756_ = _0311_;
  assign _0757_ = _0312_;
  assign _0758_ = _0313_;
  assign _0759_ = _0314_;
  assign _0760_ = _0315_;
  assign _0761_ = _0316_;
  assign _0762_ = _0317_;
  assign _0763_ = _0318_;
  assign _0764_ = _0319_;
  assign _0765_ = _0320_;
  assign _0766_ = _0321_;
  assign _0767_ = _0322_;
  assign _0768_ = _0323_;
  assign _0769_ = _0324_;
  assign _0770_ = _0325_;
  assign _0771_ = _0326_;
  assign _0772_ = _0327_;
  assign _0773_ = _0328_;
  assign _0774_ = _0329_;
  assign _0775_ = _0330_;
  assign _0776_ = _0331_;
  assign _0777_ = _0332_;
  assign _0778_ = _0333_;
  assign _0779_ = _0334_;
  assign _0780_ = _0335_;
  assign _0781_ = _0336_;
  assign _0782_ = _0337_;
  assign _0783_ = _0338_;
  assign _0784_ = _0339_;
  assign _0785_ = _0340_;
  assign _0786_ = _0341_;
  assign _0787_ = _0342_;
  assign _0788_ = _0343_;
  assign _0789_ = _0344_;
  assign _0790_ = _0345_;
  assign _0791_ = _0346_;
  assign _0792_ = _0347_;
  assign _0793_ = _0348_;
  assign _0794_ = _0349_;
  assign _0795_ = _0350_;
  assign _0796_ = _0351_;
  assign _0797_ = _0352_;
  assign _0798_ = _0353_;
  assign _0799_ = _0354_;
  assign _0800_ = _0355_;
  assign _0801_ = _0356_;
  assign _0802_ = _0357_;
  assign _0803_ = _0358_;
  assign _0804_ = _0359_;
  assign _0805_ = _0360_;
  assign _0806_ = _0361_;
  assign _0807_ = _0362_;
  assign _0808_ = _0363_;
  assign _0809_ = _0364_;
  assign _0810_ = _0365_;
  assign _0811_ = _0366_;
  assign _0812_ = _0367_;
  assign _0813_ = _0368_;
  assign _0814_ = _0369_;
  assign _0815_ = _0370_;
  assign _0816_ = _0371_;
  assign _0817_ = _0372_;
  assign _0818_ = _0373_;
  assign _0819_ = _0374_;
  assign _0820_ = _0375_;
  assign _0821_ = _0376_;
  assign _0822_ = _0377_;
  assign _0823_ = _0378_;
  assign _0824_ = _0379_;
  assign _0825_ = _0380_;
  assign _0826_ = _0381_;
  assign _0827_ = _0382_;
  assign _0828_ = _0383_;
  assign _0829_ = _0384_;
  assign _0830_ = _0385_;
  assign _0831_ = _0386_;
  assign _0832_ = _0387_;
  assign _0833_ = _0388_;
  assign _0834_ = _0389_;
  assign _0835_ = _0390_;
  assign _0836_ = _0391_;
  assign _0837_ = _0392_;
  assign _0838_ = _0393_;
  assign _0839_ = _0394_;
  assign _0840_ = _0395_;
  assign _0841_ = _0396_;
  assign _0842_ = _0397_;
  assign _0843_ = _0398_;
  assign _0844_ = _0399_;
  assign _0845_ = _0400_;
  assign _0846_ = _0401_;
  assign _0847_ = _0402_;
  assign _0848_ = _0403_;
  assign _0849_ = _0404_;
  assign _0850_ = _0405_;
  assign _0851_ = _0406_;
  assign _0852_ = _0407_;
  assign _0853_ = _0408_;
  assign _0854_ = _0409_;
  assign _0855_ = _0410_;
  assign _0856_ = _0411_;
  assign _0857_ = _0412_;
  assign _0858_ = _0413_;
  assign _0859_ = _0414_;
  assign _0860_ = _0415_;
  assign _0861_ = _0416_;
  assign _0862_ = _0417_;
  assign _0863_ = _0418_;
  assign _0864_ = _0419_;
  assign _0865_ = _0420_;
  assign _0866_ = _0421_;
  assign _0867_ = _0422_;
  assign _0868_ = _0423_;
  assign _0869_ = _0424_;
  assign _0870_ = _0425_;
  assign _0871_ = _0426_;
  assign _0872_ = _0427_;
  assign _0873_ = _0428_;
  assign _0874_ = _0429_;
  assign _0875_ = _0430_;
  assign _0876_ = _0431_;
  assign _0877_ = _0432_;
  assign _0878_ = _0433_;
  assign _0879_ = _0434_;
  assign _0880_ = _0435_;
  assign _0881_ = _0436_;
  assign _0882_ = _0437_;
  assign _0883_ = _0438_;
  assign _0884_ = _0439_;
  assign _0885_ = _0440_;
  assign _0886_ = _0441_;
  assign _0887_ = _0442_;
  assign _0888_ = _0443_;
  assign _0889_ = _0444_;
  assign _0890_ = _0445_;
  assign _0891_ = _0446_;
  assign _0892_ = _0447_;
  assign _0893_ = _0448_;
  assign _0894_ = _0449_;
  assign _0895_ = _0450_;
  assign _0896_ = _0451_;
  assign _0897_ = _0452_;
  assign _0898_ = _0453_;
  assign _0899_ = _0454_;
  assign _0900_ = _0455_;
  assign _0901_ = _0456_;
  assign _0902_ = _0457_;
  assign _0903_ = _0458_;
  assign _0904_ = _0459_;
  assign _0905_ = _0460_;
  assign _0906_ = _0461_;
  assign _0907_ = _0462_;
  assign _0908_ = _0463_;
  assign _0909_ = _0464_;
  assign _0910_ = _0465_;
  assign _0911_ = _0466_;
  assign _0912_ = _0467_;
  assign _0913_ = _0468_;
  assign _0914_ = _0469_;
  assign _0915_ = _0470_;
  assign _0916_ = _0471_;
  assign _0917_ = _0472_;
  assign _0918_ = _0473_;
  assign _0919_ = _0474_;
  assign _0920_ = _0475_;
  assign _0921_ = _0476_;
  assign _0922_ = _0477_;
  assign _0923_ = _0478_;
  assign _0924_ = _0479_;
  assign _0925_ = _0480_;
  assign _0926_ = _0481_;
endmodule

(* src = "cla_64bit.v:83" *)
module cla_gp(a, b, G, P, cout, p);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  (* src = "cla_64bit.v:86" *)
  wire _16_;
  (* src = "cla_64bit.v:86" *)
  wire _17_;
  (* src = "cla_64bit.v:85" *)
  wire _18_;
  (* src = "cla_64bit.v:85" *)
  wire _19_;
  (* src = "cla_64bit.v:85" *)
  wire _20_;
  (* src = "cla_64bit.v:85" *)
  wire _21_;
  (* src = "cla_64bit.v:85" *)
  wire _22_;
  (* src = "cla_64bit.v:85" *)
  wire _23_;
  (* src = "cla_64bit.v:85" *)
  wire _24_;
  (* src = "cla_64bit.v:85" *)
  wire _25_;
  (* src = "cla_64bit.v:90" *)
  wire _26_;
  (* src = "cla_64bit.v:90" *)
  wire _27_;
  (* src = "cla_64bit.v:90" *)
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  (* src = "cla_64bit.v:87" *)
  wire _37_;
  (* src = "cla_64bit.v:87" *)
  wire _38_;
  (* src = "cla_64bit.v:87" *)
  wire _39_;
  (* src = "cla_64bit.v:87" *)
  wire _40_;
  (* src = "cla_64bit.v:86" *)
  output G;
  (* src = "cla_64bit.v:86" *)
  output P;
  (* src = "cla_64bit.v:85" *)
  input [3:0] a;
  (* src = "cla_64bit.v:85" *)
  input [3:0] b;
  (* src = "cla_64bit.v:90" *)
  output [2:0] cout;
  (* src = "cla_64bit.v:89" *)
  (* unused_bits = "1 2 3" *)
  wire [3:0] g;
  (* src = "cla_64bit.v:87" *)
  output [3:0] p;
  AND2_X1 _41_ (
    .A1(_23_),
    .A2(_19_),
    .ZN(_29_)
  );
  OR2_X1 _42_ (
    .A1(_23_),
    .A2(_19_),
    .ZN(_30_)
  );
  XOR2_X1 _43_ (
    .A(_23_),
    .B(_19_),
    .Z(_38_)
  );
  AND2_X1 _44_ (
    .A1(_22_),
    .A2(_18_),
    .ZN(_26_)
  );
  OAI21_X1 _45_ (
    .A(_30_),
    .B1(_26_),
    .B2(_29_),
    .ZN(_31_)
  );
  INV_X1 _46_ (
    .A(_31_),
    .ZN(_27_)
  );
  NAND2_X1 _47_ (
    .A1(_24_),
    .A2(_20_),
    .ZN(_32_)
  );
  NOR2_X1 _48_ (
    .A1(_24_),
    .A2(_20_),
    .ZN(_33_)
  );
  XOR2_X1 _49_ (
    .A(_24_),
    .B(_20_),
    .Z(_39_)
  );
  OAI21_X1 _50_ (
    .A(_32_),
    .B1(_33_),
    .B2(_31_),
    .ZN(_28_)
  );
  NAND2_X1 _51_ (
    .A1(_25_),
    .A2(_21_),
    .ZN(_34_)
  );
  NOR2_X1 _52_ (
    .A1(_25_),
    .A2(_21_),
    .ZN(_35_)
  );
  XOR2_X1 _53_ (
    .A(_25_),
    .B(_21_),
    .Z(_40_)
  );
  NAND2_X1 _54_ (
    .A1(_39_),
    .A2(_40_),
    .ZN(_36_)
  );
  OAI221_X1 _55_ (
    .A(_34_),
    .B1(_35_),
    .B2(_32_),
    .C1(_36_),
    .C2(_31_),
    .ZN(_16_)
  );
  XOR2_X1 _56_ (
    .A(_22_),
    .B(_18_),
    .Z(_37_)
  );
  AND4_X1 _57_ (
    .A1(_38_),
    .A2(_39_),
    .A3(_40_),
    .A4(_37_),
    .ZN(_17_)
  );
  assign g[0] = cout[0];
  assign _23_ = b[1];
  assign _19_ = a[1];
  assign p[1] = _38_;
  assign _22_ = b[0];
  assign _18_ = a[0];
  assign cout[1] = _27_;
  assign cout[0] = _26_;
  assign _24_ = b[2];
  assign _20_ = a[2];
  assign p[2] = _39_;
  assign cout[2] = _28_;
  assign _25_ = b[3];
  assign _21_ = a[3];
  assign p[3] = _40_;
  assign G = _16_;
  assign p[0] = _37_;
  assign P = _17_;
endmodule

(* src = "cla_64bit.v:105" *)
module cla_gpc(a, b, cin, G, P, cout, p);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  (* src = "cla_64bit.v:109" *)
  wire _21_;
  (* src = "cla_64bit.v:109" *)
  wire _22_;
  (* src = "cla_64bit.v:107" *)
  wire _23_;
  (* src = "cla_64bit.v:107" *)
  wire _24_;
  (* src = "cla_64bit.v:107" *)
  wire _25_;
  (* src = "cla_64bit.v:107" *)
  wire _26_;
  (* src = "cla_64bit.v:107" *)
  wire _27_;
  (* src = "cla_64bit.v:107" *)
  wire _28_;
  (* src = "cla_64bit.v:107" *)
  wire _29_;
  (* src = "cla_64bit.v:107" *)
  wire _30_;
  (* src = "cla_64bit.v:108" *)
  wire _31_;
  (* src = "cla_64bit.v:113" *)
  wire _32_;
  (* src = "cla_64bit.v:113" *)
  wire _33_;
  (* src = "cla_64bit.v:113" *)
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  (* src = "cla_64bit.v:110" *)
  wire _49_;
  (* src = "cla_64bit.v:110" *)
  wire _50_;
  (* src = "cla_64bit.v:110" *)
  wire _51_;
  (* src = "cla_64bit.v:110" *)
  wire _52_;
  (* src = "cla_64bit.v:109" *)
  output G;
  (* src = "cla_64bit.v:109" *)
  output P;
  (* src = "cla_64bit.v:107" *)
  input [3:0] a;
  (* src = "cla_64bit.v:107" *)
  input [3:0] b;
  (* src = "cla_64bit.v:108" *)
  input cin;
  (* src = "cla_64bit.v:113" *)
  output [2:0] cout;
  (* src = "cla_64bit.v:110" *)
  output [3:0] p;
  AND2_X1 _53_ (
    .A1(_27_),
    .A2(_23_),
    .ZN(_35_)
  );
  NAND2_X1 _54_ (
    .A1(_27_),
    .A2(_23_),
    .ZN(_36_)
  );
  OAI21_X1 _55_ (
    .A(_31_),
    .B1(_27_),
    .B2(_23_),
    .ZN(_37_)
  );
  NAND2_X1 _56_ (
    .A1(_36_),
    .A2(_37_),
    .ZN(_32_)
  );
  AND2_X1 _57_ (
    .A1(_28_),
    .A2(_24_),
    .ZN(_38_)
  );
  NOR2_X1 _58_ (
    .A1(_28_),
    .A2(_24_),
    .ZN(_39_)
  );
  NOR2_X1 _59_ (
    .A1(_38_),
    .A2(_39_),
    .ZN(_50_)
  );
  XOR2_X1 _60_ (
    .A(_27_),
    .B(_23_),
    .Z(_49_)
  );
  AOI21_X1 _61_ (
    .A(_39_),
    .B1(_37_),
    .B2(_36_),
    .ZN(_40_)
  );
  OR2_X1 _62_ (
    .A1(_38_),
    .A2(_40_),
    .ZN(_33_)
  );
  XNOR2_X1 _63_ (
    .A(_29_),
    .B(_25_),
    .ZN(_41_)
  );
  INV_X1 _64_ (
    .A(_41_),
    .ZN(_51_)
  );
  NOR3_X1 _65_ (
    .A1(_38_),
    .A2(_39_),
    .A3(_41_),
    .ZN(_42_)
  );
  OAI211_X1 _66_ (
    .A(_28_),
    .B(_24_),
    .C1(_29_),
    .C2(_25_),
    .ZN(_43_)
  );
  INV_X1 _67_ (
    .A(_43_),
    .ZN(_44_)
  );
  AOI221_X1 _68_ (
    .A(_44_),
    .B1(_42_),
    .B2(_35_),
    .C1(_29_),
    .C2(_25_),
    .ZN(_45_)
  );
  NAND3_X1 _69_ (
    .A1(_31_),
    .A2(_49_),
    .A3(_42_),
    .ZN(_46_)
  );
  NAND2_X1 _70_ (
    .A1(_45_),
    .A2(_46_),
    .ZN(_34_)
  );
  NAND2_X1 _71_ (
    .A1(_30_),
    .A2(_26_),
    .ZN(_47_)
  );
  NOR2_X1 _72_ (
    .A1(_30_),
    .A2(_26_),
    .ZN(_48_)
  );
  XOR2_X1 _73_ (
    .A(_30_),
    .B(_26_),
    .Z(_52_)
  );
  OAI21_X1 _74_ (
    .A(_47_),
    .B1(_48_),
    .B2(_45_),
    .ZN(_21_)
  );
  AND3_X1 _75_ (
    .A1(_49_),
    .A2(_42_),
    .A3(_52_),
    .ZN(_22_)
  );
  assign _31_ = cin;
  assign _27_ = b[0];
  assign _23_ = a[0];
  assign cout[0] = _32_;
  assign _28_ = b[1];
  assign _24_ = a[1];
  assign p[1] = _50_;
  assign p[0] = _49_;
  assign cout[1] = _33_;
  assign _29_ = b[2];
  assign _25_ = a[2];
  assign p[2] = _51_;
  assign cout[2] = _34_;
  assign _30_ = b[3];
  assign _26_ = a[3];
  assign p[3] = _52_;
  assign G = _21_;
  assign P = _22_;
endmodule

(* src = "cla_64bit.v:127" *)
module cla_sum(a, b, sum);
  (* src = "cla_64bit.v:128" *)
  wire _0_;
  (* src = "cla_64bit.v:128" *)
  wire _1_;
  (* src = "cla_64bit.v:129" *)
  wire _2_;
  (* src = "cla_64bit.v:128" *)
  input a;
  (* src = "cla_64bit.v:128" *)
  input b;
  (* src = "cla_64bit.v:129" *)
  output sum;
  XOR2_X1 _3_ (
    .A(_1_),
    .B(_0_),
    .Z(_2_)
  );
  assign _1_ = b;
  assign _0_ = a;
  assign sum = _2_;
endmodule
